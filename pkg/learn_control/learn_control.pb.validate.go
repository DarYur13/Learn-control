// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: learn_control.proto

package learn_control

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on
// CloseTaskWithTrainingProtocolConfirmRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CloseTaskWithTrainingProtocolConfirmRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CloseTaskWithTrainingProtocolConfirmRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// CloseTaskWithTrainingProtocolConfirmRequestMultiError, or nil if none found.
func (m *CloseTaskWithTrainingProtocolConfirmRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CloseTaskWithTrainingProtocolConfirmRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TaskID

	// no validation rules for EmployeeID

	// no validation rules for TrainingID

	if len(errors) > 0 {
		return CloseTaskWithTrainingProtocolConfirmRequestMultiError(errors)
	}

	return nil
}

// CloseTaskWithTrainingProtocolConfirmRequestMultiError is an error wrapping
// multiple validation errors returned by
// CloseTaskWithTrainingProtocolConfirmRequest.ValidateAll() if the designated
// constraints aren't met.
type CloseTaskWithTrainingProtocolConfirmRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloseTaskWithTrainingProtocolConfirmRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloseTaskWithTrainingProtocolConfirmRequestMultiError) AllErrors() []error { return m }

// CloseTaskWithTrainingProtocolConfirmRequestValidationError is the validation
// error returned by CloseTaskWithTrainingProtocolConfirmRequest.Validate if
// the designated constraints aren't met.
type CloseTaskWithTrainingProtocolConfirmRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloseTaskWithTrainingProtocolConfirmRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloseTaskWithTrainingProtocolConfirmRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloseTaskWithTrainingProtocolConfirmRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloseTaskWithTrainingProtocolConfirmRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloseTaskWithTrainingProtocolConfirmRequestValidationError) ErrorName() string {
	return "CloseTaskWithTrainingProtocolConfirmRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CloseTaskWithTrainingProtocolConfirmRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloseTaskWithTrainingProtocolConfirmRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloseTaskWithTrainingProtocolConfirmRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloseTaskWithTrainingProtocolConfirmRequestValidationError{}

// Validate checks the field values on CloseTaskWithPositionTrainingsSetRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CloseTaskWithPositionTrainingsSetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CloseTaskWithPositionTrainingsSetRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// CloseTaskWithPositionTrainingsSetRequestMultiError, or nil if none found.
func (m *CloseTaskWithPositionTrainingsSetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CloseTaskWithPositionTrainingsSetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TaskID

	// no validation rules for PositionID

	if len(errors) > 0 {
		return CloseTaskWithPositionTrainingsSetRequestMultiError(errors)
	}

	return nil
}

// CloseTaskWithPositionTrainingsSetRequestMultiError is an error wrapping
// multiple validation errors returned by
// CloseTaskWithPositionTrainingsSetRequest.ValidateAll() if the designated
// constraints aren't met.
type CloseTaskWithPositionTrainingsSetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloseTaskWithPositionTrainingsSetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloseTaskWithPositionTrainingsSetRequestMultiError) AllErrors() []error { return m }

// CloseTaskWithPositionTrainingsSetRequestValidationError is the validation
// error returned by CloseTaskWithPositionTrainingsSetRequest.Validate if the
// designated constraints aren't met.
type CloseTaskWithPositionTrainingsSetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloseTaskWithPositionTrainingsSetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloseTaskWithPositionTrainingsSetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloseTaskWithPositionTrainingsSetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloseTaskWithPositionTrainingsSetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloseTaskWithPositionTrainingsSetRequestValidationError) ErrorName() string {
	return "CloseTaskWithPositionTrainingsSetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CloseTaskWithPositionTrainingsSetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloseTaskWithPositionTrainingsSetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloseTaskWithPositionTrainingsSetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloseTaskWithPositionTrainingsSetRequestValidationError{}

// Validate checks the field values on CloseTaskWithTrainingDateSetRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CloseTaskWithTrainingDateSetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloseTaskWithTrainingDateSetRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CloseTaskWithTrainingDateSetRequestMultiError, or nil if none found.
func (m *CloseTaskWithTrainingDateSetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CloseTaskWithTrainingDateSetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TaskID

	// no validation rules for EmployeeID

	// no validation rules for TrainingID

	if all {
		switch v := interface{}(m.GetDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CloseTaskWithTrainingDateSetRequestValidationError{
					field:  "Date",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CloseTaskWithTrainingDateSetRequestValidationError{
					field:  "Date",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CloseTaskWithTrainingDateSetRequestValidationError{
				field:  "Date",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for TaskType

	if len(errors) > 0 {
		return CloseTaskWithTrainingDateSetRequestMultiError(errors)
	}

	return nil
}

// CloseTaskWithTrainingDateSetRequestMultiError is an error wrapping multiple
// validation errors returned by
// CloseTaskWithTrainingDateSetRequest.ValidateAll() if the designated
// constraints aren't met.
type CloseTaskWithTrainingDateSetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloseTaskWithTrainingDateSetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloseTaskWithTrainingDateSetRequestMultiError) AllErrors() []error { return m }

// CloseTaskWithTrainingDateSetRequestValidationError is the validation error
// returned by CloseTaskWithTrainingDateSetRequest.Validate if the designated
// constraints aren't met.
type CloseTaskWithTrainingDateSetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloseTaskWithTrainingDateSetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloseTaskWithTrainingDateSetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloseTaskWithTrainingDateSetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloseTaskWithTrainingDateSetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloseTaskWithTrainingDateSetRequestValidationError) ErrorName() string {
	return "CloseTaskWithTrainingDateSetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CloseTaskWithTrainingDateSetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloseTaskWithTrainingDateSetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloseTaskWithTrainingDateSetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloseTaskWithTrainingDateSetRequestValidationError{}

// Validate checks the field values on CloseAssignTaskRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CloseAssignTaskRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloseAssignTaskRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CloseAssignTaskRequestMultiError, or nil if none found.
func (m *CloseAssignTaskRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CloseAssignTaskRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TaskID

	// no validation rules for EmployeeID

	// no validation rules for TrainingID

	// no validation rules for TaskType

	if len(errors) > 0 {
		return CloseAssignTaskRequestMultiError(errors)
	}

	return nil
}

// CloseAssignTaskRequestMultiError is an error wrapping multiple validation
// errors returned by CloseAssignTaskRequest.ValidateAll() if the designated
// constraints aren't met.
type CloseAssignTaskRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloseAssignTaskRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloseAssignTaskRequestMultiError) AllErrors() []error { return m }

// CloseAssignTaskRequestValidationError is the validation error returned by
// CloseAssignTaskRequest.Validate if the designated constraints aren't met.
type CloseAssignTaskRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloseAssignTaskRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloseAssignTaskRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloseAssignTaskRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloseAssignTaskRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloseAssignTaskRequestValidationError) ErrorName() string {
	return "CloseAssignTaskRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CloseAssignTaskRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloseAssignTaskRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloseAssignTaskRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloseAssignTaskRequestValidationError{}

// Validate checks the field values on GetTasksByFiltersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTasksByFiltersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTasksByFiltersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTasksByFiltersRequestMultiError, or nil if none found.
func (m *GetTasksByFiltersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTasksByFiltersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Done != nil {
		// no validation rules for Done
	}

	if len(errors) > 0 {
		return GetTasksByFiltersRequestMultiError(errors)
	}

	return nil
}

// GetTasksByFiltersRequestMultiError is an error wrapping multiple validation
// errors returned by GetTasksByFiltersRequest.ValidateAll() if the designated
// constraints aren't met.
type GetTasksByFiltersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTasksByFiltersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTasksByFiltersRequestMultiError) AllErrors() []error { return m }

// GetTasksByFiltersRequestValidationError is the validation error returned by
// GetTasksByFiltersRequest.Validate if the designated constraints aren't met.
type GetTasksByFiltersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTasksByFiltersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTasksByFiltersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTasksByFiltersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTasksByFiltersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTasksByFiltersRequestValidationError) ErrorName() string {
	return "GetTasksByFiltersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTasksByFiltersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTasksByFiltersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTasksByFiltersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTasksByFiltersRequestValidationError{}

// Validate checks the field values on GetTasksByFiltersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTasksByFiltersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTasksByFiltersResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTasksByFiltersResponseMultiError, or nil if none found.
func (m *GetTasksByFiltersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTasksByFiltersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTasks() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetTasksByFiltersResponseValidationError{
						field:  fmt.Sprintf("Tasks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetTasksByFiltersResponseValidationError{
						field:  fmt.Sprintf("Tasks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetTasksByFiltersResponseValidationError{
					field:  fmt.Sprintf("Tasks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetTasksByFiltersResponseMultiError(errors)
	}

	return nil
}

// GetTasksByFiltersResponseMultiError is an error wrapping multiple validation
// errors returned by GetTasksByFiltersResponse.ValidateAll() if the
// designated constraints aren't met.
type GetTasksByFiltersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTasksByFiltersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTasksByFiltersResponseMultiError) AllErrors() []error { return m }

// GetTasksByFiltersResponseValidationError is the validation error returned by
// GetTasksByFiltersResponse.Validate if the designated constraints aren't met.
type GetTasksByFiltersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTasksByFiltersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTasksByFiltersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTasksByFiltersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTasksByFiltersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTasksByFiltersResponseValidationError) ErrorName() string {
	return "GetTasksByFiltersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTasksByFiltersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTasksByFiltersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTasksByFiltersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTasksByFiltersResponseValidationError{}

// Validate checks the field values on Task with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Task) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Task with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in TaskMultiError, or nil if none found.
func (m *Task) ValidateAll() error {
	return m.validate(true)
}

func (m *Task) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Type

	// no validation rules for Description

	// no validation rules for Employee

	// no validation rules for Training

	// no validation rules for Position

	// no validation rules for Department

	// no validation rules for Executor

	// no validation rules for DownloadFileLink

	// no validation rules for Done

	if len(errors) > 0 {
		return TaskMultiError(errors)
	}

	return nil
}

// TaskMultiError is an error wrapping multiple validation errors returned by
// Task.ValidateAll() if the designated constraints aren't met.
type TaskMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TaskMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TaskMultiError) AllErrors() []error { return m }

// TaskValidationError is the validation error returned by Task.Validate if the
// designated constraints aren't met.
type TaskValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TaskValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TaskValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TaskValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TaskValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TaskValidationError) ErrorName() string { return "TaskValidationError" }

// Error satisfies the builtin error interface
func (e TaskValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTask.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TaskValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TaskValidationError{}

// Validate checks the field values on AddEmployeeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddEmployeeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddEmployeeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddEmployeeRequestMultiError, or nil if none found.
func (m *AddEmployeeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddEmployeeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetFullname()) < 1 {
		err := AddEmployeeRequestValidationError{
			field:  "Fullname",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetBirthdate() == nil {
		err := AddEmployeeRequestValidationError{
			field:  "Birthdate",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if t := m.GetBirthdate(); t != nil {
		ts, err := t.AsTime(), t.CheckValid()
		if err != nil {
			err = AddEmployeeRequestValidationError{
				field:  "Birthdate",
				reason: "value is not a valid timestamp",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {

			now := time.Now()

			if ts.Sub(now) >= 0 {
				err := AddEmployeeRequestValidationError{
					field:  "Birthdate",
					reason: "value must be less than now",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}
	}

	if utf8.RuneCountInString(m.GetDepartment()) < 1 {
		err := AddEmployeeRequestValidationError{
			field:  "Department",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPosition()) < 1 {
		err := AddEmployeeRequestValidationError{
			field:  "Position",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetEmploymentDate() == nil {
		err := AddEmployeeRequestValidationError{
			field:  "EmploymentDate",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_AddEmployeeRequest_Snils_Pattern.MatchString(m.GetSnils()) {
		err := AddEmployeeRequestValidationError{
			field:  "Snils",
			reason: "value does not match regex pattern \"^[0-9]{3}-[0-9]{3}-[0-9]{3} [0-9]{2}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_AddEmployeeRequest_Email_Pattern.MatchString(m.GetEmail()) {
		err := AddEmployeeRequestValidationError{
			field:  "Email",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddEmployeeRequestMultiError(errors)
	}

	return nil
}

// AddEmployeeRequestMultiError is an error wrapping multiple validation errors
// returned by AddEmployeeRequest.ValidateAll() if the designated constraints
// aren't met.
type AddEmployeeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddEmployeeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddEmployeeRequestMultiError) AllErrors() []error { return m }

// AddEmployeeRequestValidationError is the validation error returned by
// AddEmployeeRequest.Validate if the designated constraints aren't met.
type AddEmployeeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddEmployeeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddEmployeeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddEmployeeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddEmployeeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddEmployeeRequestValidationError) ErrorName() string {
	return "AddEmployeeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddEmployeeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddEmployeeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddEmployeeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddEmployeeRequestValidationError{}

var _AddEmployeeRequest_Snils_Pattern = regexp.MustCompile("^[0-9]{3}-[0-9]{3}-[0-9]{3} [0-9]{2}$")

var _AddEmployeeRequest_Email_Pattern = regexp.MustCompile("^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$")

// Validate checks the field values on GetEmployeesByNameRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetEmployeesByNameRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetEmployeesByNameRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetEmployeesByNameRequestMultiError, or nil if none found.
func (m *GetEmployeesByNameRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetEmployeesByNameRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return GetEmployeesByNameRequestMultiError(errors)
	}

	return nil
}

// GetEmployeesByNameRequestMultiError is an error wrapping multiple validation
// errors returned by GetEmployeesByNameRequest.ValidateAll() if the
// designated constraints aren't met.
type GetEmployeesByNameRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetEmployeesByNameRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetEmployeesByNameRequestMultiError) AllErrors() []error { return m }

// GetEmployeesByNameRequestValidationError is the validation error returned by
// GetEmployeesByNameRequest.Validate if the designated constraints aren't met.
type GetEmployeesByNameRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEmployeesByNameRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEmployeesByNameRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEmployeesByNameRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEmployeesByNameRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEmployeesByNameRequestValidationError) ErrorName() string {
	return "GetEmployeesByNameRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetEmployeesByNameRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEmployeesByNameRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEmployeesByNameRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEmployeesByNameRequestValidationError{}

// Validate checks the field values on GetEmployeesByNameResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetEmployeesByNameResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetEmployeesByNameResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetEmployeesByNameResponseMultiError, or nil if none found.
func (m *GetEmployeesByNameResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetEmployeesByNameResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetEmployees() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetEmployeesByNameResponseValidationError{
						field:  fmt.Sprintf("Employees[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetEmployeesByNameResponseValidationError{
						field:  fmt.Sprintf("Employees[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetEmployeesByNameResponseValidationError{
					field:  fmt.Sprintf("Employees[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetEmployeesByNameResponseMultiError(errors)
	}

	return nil
}

// GetEmployeesByNameResponseMultiError is an error wrapping multiple
// validation errors returned by GetEmployeesByNameResponse.ValidateAll() if
// the designated constraints aren't met.
type GetEmployeesByNameResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetEmployeesByNameResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetEmployeesByNameResponseMultiError) AllErrors() []error { return m }

// GetEmployeesByNameResponseValidationError is the validation error returned
// by GetEmployeesByNameResponse.Validate if the designated constraints aren't met.
type GetEmployeesByNameResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEmployeesByNameResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEmployeesByNameResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEmployeesByNameResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEmployeesByNameResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEmployeesByNameResponseValidationError) ErrorName() string {
	return "GetEmployeesByNameResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetEmployeesByNameResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEmployeesByNameResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEmployeesByNameResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEmployeesByNameResponseValidationError{}

// Validate checks the field values on EmployeeBaseInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *EmployeeBaseInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EmployeeBaseInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EmployeeBaseInfoMultiError, or nil if none found.
func (m *EmployeeBaseInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *EmployeeBaseInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Fullname

	if all {
		switch v := interface{}(m.GetBirthdate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EmployeeBaseInfoValidationError{
					field:  "Birthdate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EmployeeBaseInfoValidationError{
					field:  "Birthdate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBirthdate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EmployeeBaseInfoValidationError{
				field:  "Birthdate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return EmployeeBaseInfoMultiError(errors)
	}

	return nil
}

// EmployeeBaseInfoMultiError is an error wrapping multiple validation errors
// returned by EmployeeBaseInfo.ValidateAll() if the designated constraints
// aren't met.
type EmployeeBaseInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EmployeeBaseInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EmployeeBaseInfoMultiError) AllErrors() []error { return m }

// EmployeeBaseInfoValidationError is the validation error returned by
// EmployeeBaseInfo.Validate if the designated constraints aren't met.
type EmployeeBaseInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmployeeBaseInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmployeeBaseInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmployeeBaseInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmployeeBaseInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmployeeBaseInfoValidationError) ErrorName() string { return "EmployeeBaseInfoValidationError" }

// Error satisfies the builtin error interface
func (e EmployeeBaseInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmployeeBaseInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmployeeBaseInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmployeeBaseInfoValidationError{}

// Validate checks the field values on GetEmployeePersonalCardRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetEmployeePersonalCardRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetEmployeePersonalCardRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetEmployeePersonalCardRequestMultiError, or nil if none found.
func (m *GetEmployeePersonalCardRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetEmployeePersonalCardRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetEmployeePersonalCardRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetEmployeePersonalCardRequestMultiError(errors)
	}

	return nil
}

// GetEmployeePersonalCardRequestMultiError is an error wrapping multiple
// validation errors returned by GetEmployeePersonalCardRequest.ValidateAll()
// if the designated constraints aren't met.
type GetEmployeePersonalCardRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetEmployeePersonalCardRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetEmployeePersonalCardRequestMultiError) AllErrors() []error { return m }

// GetEmployeePersonalCardRequestValidationError is the validation error
// returned by GetEmployeePersonalCardRequest.Validate if the designated
// constraints aren't met.
type GetEmployeePersonalCardRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEmployeePersonalCardRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEmployeePersonalCardRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEmployeePersonalCardRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEmployeePersonalCardRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEmployeePersonalCardRequestValidationError) ErrorName() string {
	return "GetEmployeePersonalCardRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetEmployeePersonalCardRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEmployeePersonalCardRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEmployeePersonalCardRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEmployeePersonalCardRequestValidationError{}

// Validate checks the field values on GetEmployeePersonalCardResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetEmployeePersonalCardResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetEmployeePersonalCardResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetEmployeePersonalCardResponseMultiError, or nil if none found.
func (m *GetEmployeePersonalCardResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetEmployeePersonalCardResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Fullname

	if all {
		switch v := interface{}(m.GetBirthdate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetEmployeePersonalCardResponseValidationError{
					field:  "Birthdate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetEmployeePersonalCardResponseValidationError{
					field:  "Birthdate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBirthdate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetEmployeePersonalCardResponseValidationError{
				field:  "Birthdate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Department

	// no validation rules for Position

	if all {
		switch v := interface{}(m.GetEmploymentDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetEmployeePersonalCardResponseValidationError{
					field:  "EmploymentDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetEmployeePersonalCardResponseValidationError{
					field:  "EmploymentDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEmploymentDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetEmployeePersonalCardResponseValidationError{
				field:  "EmploymentDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Snils

	for idx, item := range m.GetTrainings() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetEmployeePersonalCardResponseValidationError{
						field:  fmt.Sprintf("Trainings[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetEmployeePersonalCardResponseValidationError{
						field:  fmt.Sprintf("Trainings[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetEmployeePersonalCardResponseValidationError{
					field:  fmt.Sprintf("Trainings[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetEmployeePersonalCardResponseMultiError(errors)
	}

	return nil
}

// GetEmployeePersonalCardResponseMultiError is an error wrapping multiple
// validation errors returned by GetEmployeePersonalCardResponse.ValidateAll()
// if the designated constraints aren't met.
type GetEmployeePersonalCardResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetEmployeePersonalCardResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetEmployeePersonalCardResponseMultiError) AllErrors() []error { return m }

// GetEmployeePersonalCardResponseValidationError is the validation error
// returned by GetEmployeePersonalCardResponse.Validate if the designated
// constraints aren't met.
type GetEmployeePersonalCardResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEmployeePersonalCardResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEmployeePersonalCardResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEmployeePersonalCardResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEmployeePersonalCardResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEmployeePersonalCardResponseValidationError) ErrorName() string {
	return "GetEmployeePersonalCardResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetEmployeePersonalCardResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEmployeePersonalCardResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEmployeePersonalCardResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEmployeePersonalCardResponseValidationError{}

// Validate checks the field values on Training with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Training) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Training with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TrainingMultiError, or nil
// if none found.
func (m *Training) ValidateAll() error {
	return m.validate(true)
}

func (m *Training) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Type

	if all {
		switch v := interface{}(m.GetPassDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TrainingValidationError{
					field:  "PassDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TrainingValidationError{
					field:  "PassDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPassDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TrainingValidationError{
				field:  "PassDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRePassDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TrainingValidationError{
					field:  "RePassDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TrainingValidationError{
					field:  "RePassDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRePassDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TrainingValidationError{
				field:  "RePassDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for HasProtocol

	if len(errors) > 0 {
		return TrainingMultiError(errors)
	}

	return nil
}

// TrainingMultiError is an error wrapping multiple validation errors returned
// by Training.ValidateAll() if the designated constraints aren't met.
type TrainingMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TrainingMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TrainingMultiError) AllErrors() []error { return m }

// TrainingValidationError is the validation error returned by
// Training.Validate if the designated constraints aren't met.
type TrainingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TrainingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TrainingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TrainingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TrainingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TrainingValidationError) ErrorName() string { return "TrainingValidationError" }

// Error satisfies the builtin error interface
func (e TrainingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTraining.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TrainingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TrainingValidationError{}

// Validate checks the field values on UpdateEmployeeTrainingDateRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateEmployeeTrainingDateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateEmployeeTrainingDateRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateEmployeeTrainingDateRequestMultiError, or nil if none found.
func (m *UpdateEmployeeTrainingDateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateEmployeeTrainingDateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EmployeeID

	// no validation rules for TrainingID

	if all {
		switch v := interface{}(m.GetDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateEmployeeTrainingDateRequestValidationError{
					field:  "Date",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateEmployeeTrainingDateRequestValidationError{
					field:  "Date",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateEmployeeTrainingDateRequestValidationError{
				field:  "Date",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateEmployeeTrainingDateRequestMultiError(errors)
	}

	return nil
}

// UpdateEmployeeTrainingDateRequestMultiError is an error wrapping multiple
// validation errors returned by
// UpdateEmployeeTrainingDateRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateEmployeeTrainingDateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateEmployeeTrainingDateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateEmployeeTrainingDateRequestMultiError) AllErrors() []error { return m }

// UpdateEmployeeTrainingDateRequestValidationError is the validation error
// returned by UpdateEmployeeTrainingDateRequest.Validate if the designated
// constraints aren't met.
type UpdateEmployeeTrainingDateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateEmployeeTrainingDateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateEmployeeTrainingDateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateEmployeeTrainingDateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateEmployeeTrainingDateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateEmployeeTrainingDateRequestValidationError) ErrorName() string {
	return "UpdateEmployeeTrainingDateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateEmployeeTrainingDateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateEmployeeTrainingDateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateEmployeeTrainingDateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateEmployeeTrainingDateRequestValidationError{}

// Validate checks the field values on UpdateEmployeeTrainingDateResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateEmployeeTrainingDateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateEmployeeTrainingDateResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateEmployeeTrainingDateResponseMultiError, or nil if none found.
func (m *UpdateEmployeeTrainingDateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateEmployeeTrainingDateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPassDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateEmployeeTrainingDateResponseValidationError{
					field:  "PassDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateEmployeeTrainingDateResponseValidationError{
					field:  "PassDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPassDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateEmployeeTrainingDateResponseValidationError{
				field:  "PassDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRePassDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateEmployeeTrainingDateResponseValidationError{
					field:  "RePassDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateEmployeeTrainingDateResponseValidationError{
					field:  "RePassDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRePassDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateEmployeeTrainingDateResponseValidationError{
				field:  "RePassDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateEmployeeTrainingDateResponseMultiError(errors)
	}

	return nil
}

// UpdateEmployeeTrainingDateResponseMultiError is an error wrapping multiple
// validation errors returned by
// UpdateEmployeeTrainingDateResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateEmployeeTrainingDateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateEmployeeTrainingDateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateEmployeeTrainingDateResponseMultiError) AllErrors() []error { return m }

// UpdateEmployeeTrainingDateResponseValidationError is the validation error
// returned by UpdateEmployeeTrainingDateResponse.Validate if the designated
// constraints aren't met.
type UpdateEmployeeTrainingDateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateEmployeeTrainingDateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateEmployeeTrainingDateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateEmployeeTrainingDateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateEmployeeTrainingDateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateEmployeeTrainingDateResponseValidationError) ErrorName() string {
	return "UpdateEmployeeTrainingDateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateEmployeeTrainingDateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateEmployeeTrainingDateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateEmployeeTrainingDateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateEmployeeTrainingDateResponseValidationError{}

// Validate checks the field values on GetEmployeesByFiltersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetEmployeesByFiltersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetEmployeesByFiltersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetEmployeesByFiltersRequestMultiError, or nil if none found.
func (m *GetEmployeesByFiltersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetEmployeesByFiltersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Department != nil {
		// no validation rules for Department
	}

	if m.Position != nil {
		// no validation rules for Position
	}

	if m.TrainingID != nil {
		// no validation rules for TrainingID
	}

	if m.RetrainingIn != nil {
		// no validation rules for RetrainingIn
	}

	if m.TrainigsNotPassed != nil {
		// no validation rules for TrainigsNotPassed
	}

	if m.DateFrom != nil {

		if all {
			switch v := interface{}(m.GetDateFrom()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetEmployeesByFiltersRequestValidationError{
						field:  "DateFrom",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetEmployeesByFiltersRequestValidationError{
						field:  "DateFrom",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDateFrom()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetEmployeesByFiltersRequestValidationError{
					field:  "DateFrom",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.DateTo != nil {

		if all {
			switch v := interface{}(m.GetDateTo()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetEmployeesByFiltersRequestValidationError{
						field:  "DateTo",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetEmployeesByFiltersRequestValidationError{
						field:  "DateTo",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDateTo()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetEmployeesByFiltersRequestValidationError{
					field:  "DateTo",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.HasProtocol != nil {
		// no validation rules for HasProtocol
	}

	if len(errors) > 0 {
		return GetEmployeesByFiltersRequestMultiError(errors)
	}

	return nil
}

// GetEmployeesByFiltersRequestMultiError is an error wrapping multiple
// validation errors returned by GetEmployeesByFiltersRequest.ValidateAll() if
// the designated constraints aren't met.
type GetEmployeesByFiltersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetEmployeesByFiltersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetEmployeesByFiltersRequestMultiError) AllErrors() []error { return m }

// GetEmployeesByFiltersRequestValidationError is the validation error returned
// by GetEmployeesByFiltersRequest.Validate if the designated constraints
// aren't met.
type GetEmployeesByFiltersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEmployeesByFiltersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEmployeesByFiltersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEmployeesByFiltersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEmployeesByFiltersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEmployeesByFiltersRequestValidationError) ErrorName() string {
	return "GetEmployeesByFiltersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetEmployeesByFiltersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEmployeesByFiltersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEmployeesByFiltersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEmployeesByFiltersRequestValidationError{}

// Validate checks the field values on GetEmployeesByFiltersResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetEmployeesByFiltersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetEmployeesByFiltersResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetEmployeesByFiltersResponseMultiError, or nil if none found.
func (m *GetEmployeesByFiltersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetEmployeesByFiltersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetEmployees() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetEmployeesByFiltersResponseValidationError{
						field:  fmt.Sprintf("Employees[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetEmployeesByFiltersResponseValidationError{
						field:  fmt.Sprintf("Employees[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetEmployeesByFiltersResponseValidationError{
					field:  fmt.Sprintf("Employees[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetEmployeesByFiltersResponseMultiError(errors)
	}

	return nil
}

// GetEmployeesByFiltersResponseMultiError is an error wrapping multiple
// validation errors returned by GetEmployeesByFiltersResponse.ValidateAll()
// if the designated constraints aren't met.
type GetEmployeesByFiltersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetEmployeesByFiltersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetEmployeesByFiltersResponseMultiError) AllErrors() []error { return m }

// GetEmployeesByFiltersResponseValidationError is the validation error
// returned by GetEmployeesByFiltersResponse.Validate if the designated
// constraints aren't met.
type GetEmployeesByFiltersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEmployeesByFiltersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEmployeesByFiltersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEmployeesByFiltersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEmployeesByFiltersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEmployeesByFiltersResponseValidationError) ErrorName() string {
	return "GetEmployeesByFiltersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetEmployeesByFiltersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEmployeesByFiltersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEmployeesByFiltersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEmployeesByFiltersResponseValidationError{}

// Validate checks the field values on EmployeeInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EmployeeInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EmployeeInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EmployeeInfoMultiError, or
// nil if none found.
func (m *EmployeeInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *EmployeeInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Fullname

	// no validation rules for Department

	// no validation rules for Position

	for idx, item := range m.GetTrainings() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EmployeeInfoValidationError{
						field:  fmt.Sprintf("Trainings[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EmployeeInfoValidationError{
						field:  fmt.Sprintf("Trainings[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EmployeeInfoValidationError{
					field:  fmt.Sprintf("Trainings[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return EmployeeInfoMultiError(errors)
	}

	return nil
}

// EmployeeInfoMultiError is an error wrapping multiple validation errors
// returned by EmployeeInfo.ValidateAll() if the designated constraints aren't met.
type EmployeeInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EmployeeInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EmployeeInfoMultiError) AllErrors() []error { return m }

// EmployeeInfoValidationError is the validation error returned by
// EmployeeInfo.Validate if the designated constraints aren't met.
type EmployeeInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmployeeInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmployeeInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmployeeInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmployeeInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmployeeInfoValidationError) ErrorName() string { return "EmployeeInfoValidationError" }

// Error satisfies the builtin error interface
func (e EmployeeInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmployeeInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmployeeInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmployeeInfoValidationError{}

// Validate checks the field values on GetDepartmentsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDepartmentsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDepartmentsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDepartmentsResponseMultiError, or nil if none found.
func (m *GetDepartmentsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDepartmentsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetDepartmentsResponseMultiError(errors)
	}

	return nil
}

// GetDepartmentsResponseMultiError is an error wrapping multiple validation
// errors returned by GetDepartmentsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetDepartmentsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDepartmentsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDepartmentsResponseMultiError) AllErrors() []error { return m }

// GetDepartmentsResponseValidationError is the validation error returned by
// GetDepartmentsResponse.Validate if the designated constraints aren't met.
type GetDepartmentsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDepartmentsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDepartmentsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDepartmentsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDepartmentsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDepartmentsResponseValidationError) ErrorName() string {
	return "GetDepartmentsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDepartmentsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDepartmentsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDepartmentsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDepartmentsResponseValidationError{}

// Validate checks the field values on GetPositionsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPositionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPositionsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPositionsResponseMultiError, or nil if none found.
func (m *GetPositionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPositionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetPositionsResponseMultiError(errors)
	}

	return nil
}

// GetPositionsResponseMultiError is an error wrapping multiple validation
// errors returned by GetPositionsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetPositionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPositionsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPositionsResponseMultiError) AllErrors() []error { return m }

// GetPositionsResponseValidationError is the validation error returned by
// GetPositionsResponse.Validate if the designated constraints aren't met.
type GetPositionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPositionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPositionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPositionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPositionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPositionsResponseValidationError) ErrorName() string {
	return "GetPositionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPositionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPositionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPositionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPositionsResponseValidationError{}

// Validate checks the field values on GetTrainingsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTrainingsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTrainingsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTrainingsResponseMultiError, or nil if none found.
func (m *GetTrainingsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTrainingsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTrainings() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetTrainingsResponseValidationError{
						field:  fmt.Sprintf("Trainings[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetTrainingsResponseValidationError{
						field:  fmt.Sprintf("Trainings[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetTrainingsResponseValidationError{
					field:  fmt.Sprintf("Trainings[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetTrainingsResponseMultiError(errors)
	}

	return nil
}

// GetTrainingsResponseMultiError is an error wrapping multiple validation
// errors returned by GetTrainingsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetTrainingsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTrainingsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTrainingsResponseMultiError) AllErrors() []error { return m }

// GetTrainingsResponseValidationError is the validation error returned by
// GetTrainingsResponse.Validate if the designated constraints aren't met.
type GetTrainingsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTrainingsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTrainingsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTrainingsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTrainingsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTrainingsResponseValidationError) ErrorName() string {
	return "GetTrainingsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTrainingsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTrainingsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTrainingsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTrainingsResponseValidationError{}

// Validate checks the field values on TrainingBaseInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TrainingBaseInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TrainingBaseInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TrainingBaseInfoMultiError, or nil if none found.
func (m *TrainingBaseInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *TrainingBaseInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Type

	if len(errors) > 0 {
		return TrainingBaseInfoMultiError(errors)
	}

	return nil
}

// TrainingBaseInfoMultiError is an error wrapping multiple validation errors
// returned by TrainingBaseInfo.ValidateAll() if the designated constraints
// aren't met.
type TrainingBaseInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TrainingBaseInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TrainingBaseInfoMultiError) AllErrors() []error { return m }

// TrainingBaseInfoValidationError is the validation error returned by
// TrainingBaseInfo.Validate if the designated constraints aren't met.
type TrainingBaseInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TrainingBaseInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TrainingBaseInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TrainingBaseInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TrainingBaseInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TrainingBaseInfoValidationError) ErrorName() string { return "TrainingBaseInfoValidationError" }

// Error satisfies the builtin error interface
func (e TrainingBaseInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTrainingBaseInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TrainingBaseInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TrainingBaseInfoValidationError{}
