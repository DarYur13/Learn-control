// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: learn_control.proto

package learn_control

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetEmployeesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetEmployeesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetEmployeesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetEmployeesRequestMultiError, or nil if none found.
func (m *GetEmployeesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetEmployeesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return GetEmployeesRequestMultiError(errors)
	}

	return nil
}

// GetEmployeesRequestMultiError is an error wrapping multiple validation
// errors returned by GetEmployeesRequest.ValidateAll() if the designated
// constraints aren't met.
type GetEmployeesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetEmployeesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetEmployeesRequestMultiError) AllErrors() []error { return m }

// GetEmployeesRequestValidationError is the validation error returned by
// GetEmployeesRequest.Validate if the designated constraints aren't met.
type GetEmployeesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEmployeesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEmployeesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEmployeesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEmployeesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEmployeesRequestValidationError) ErrorName() string {
	return "GetEmployeesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetEmployeesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEmployeesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEmployeesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEmployeesRequestValidationError{}

// Validate checks the field values on GetEmployeesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetEmployeesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetEmployeesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetEmployeesResponseMultiError, or nil if none found.
func (m *GetEmployeesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetEmployeesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetEmployees() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetEmployeesResponseValidationError{
						field:  fmt.Sprintf("Employees[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetEmployeesResponseValidationError{
						field:  fmt.Sprintf("Employees[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetEmployeesResponseValidationError{
					field:  fmt.Sprintf("Employees[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetEmployeesResponseMultiError(errors)
	}

	return nil
}

// GetEmployeesResponseMultiError is an error wrapping multiple validation
// errors returned by GetEmployeesResponse.ValidateAll() if the designated
// constraints aren't met.
type GetEmployeesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetEmployeesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetEmployeesResponseMultiError) AllErrors() []error { return m }

// GetEmployeesResponseValidationError is the validation error returned by
// GetEmployeesResponse.Validate if the designated constraints aren't met.
type GetEmployeesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEmployeesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEmployeesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEmployeesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEmployeesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEmployeesResponseValidationError) ErrorName() string {
	return "GetEmployeesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetEmployeesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEmployeesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEmployeesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEmployeesResponseValidationError{}

// Validate checks the field values on EmployeeBaseInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *EmployeeBaseInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EmployeeBaseInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EmployeeBaseInfoMultiError, or nil if none found.
func (m *EmployeeBaseInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *EmployeeBaseInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Fullname

	// no validation rules for Birthdate

	if len(errors) > 0 {
		return EmployeeBaseInfoMultiError(errors)
	}

	return nil
}

// EmployeeBaseInfoMultiError is an error wrapping multiple validation errors
// returned by EmployeeBaseInfo.ValidateAll() if the designated constraints
// aren't met.
type EmployeeBaseInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EmployeeBaseInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EmployeeBaseInfoMultiError) AllErrors() []error { return m }

// EmployeeBaseInfoValidationError is the validation error returned by
// EmployeeBaseInfo.Validate if the designated constraints aren't met.
type EmployeeBaseInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmployeeBaseInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmployeeBaseInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmployeeBaseInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmployeeBaseInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmployeeBaseInfoValidationError) ErrorName() string { return "EmployeeBaseInfoValidationError" }

// Error satisfies the builtin error interface
func (e EmployeeBaseInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmployeeBaseInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmployeeBaseInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmployeeBaseInfoValidationError{}

// Validate checks the field values on GetEmployeeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetEmployeeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetEmployeeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetEmployeeRequestMultiError, or nil if none found.
func (m *GetEmployeeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetEmployeeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetEmployeeRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetEmployeeRequestMultiError(errors)
	}

	return nil
}

// GetEmployeeRequestMultiError is an error wrapping multiple validation errors
// returned by GetEmployeeRequest.ValidateAll() if the designated constraints
// aren't met.
type GetEmployeeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetEmployeeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetEmployeeRequestMultiError) AllErrors() []error { return m }

// GetEmployeeRequestValidationError is the validation error returned by
// GetEmployeeRequest.Validate if the designated constraints aren't met.
type GetEmployeeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEmployeeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEmployeeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEmployeeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEmployeeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEmployeeRequestValidationError) ErrorName() string {
	return "GetEmployeeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetEmployeeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEmployeeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEmployeeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEmployeeRequestValidationError{}

// Validate checks the field values on GetEmployeeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetEmployeeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetEmployeeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetEmployeeResponseMultiError, or nil if none found.
func (m *GetEmployeeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetEmployeeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Fullname

	// no validation rules for Birthdate

	// no validation rules for Department

	// no validation rules for Position

	// no validation rules for Snils

	for idx, item := range m.GetTrainings() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetEmployeeResponseValidationError{
						field:  fmt.Sprintf("Trainings[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetEmployeeResponseValidationError{
						field:  fmt.Sprintf("Trainings[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetEmployeeResponseValidationError{
					field:  fmt.Sprintf("Trainings[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetEmployeeResponseMultiError(errors)
	}

	return nil
}

// GetEmployeeResponseMultiError is an error wrapping multiple validation
// errors returned by GetEmployeeResponse.ValidateAll() if the designated
// constraints aren't met.
type GetEmployeeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetEmployeeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetEmployeeResponseMultiError) AllErrors() []error { return m }

// GetEmployeeResponseValidationError is the validation error returned by
// GetEmployeeResponse.Validate if the designated constraints aren't met.
type GetEmployeeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEmployeeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEmployeeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEmployeeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEmployeeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEmployeeResponseValidationError) ErrorName() string {
	return "GetEmployeeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetEmployeeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEmployeeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEmployeeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEmployeeResponseValidationError{}

// Validate checks the field values on Training with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Training) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Training with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TrainingMultiError, or nil
// if none found.
func (m *Training) ValidateAll() error {
	return m.validate(true)
}

func (m *Training) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Date

	// no validation rules for Nextdate

	if len(errors) > 0 {
		return TrainingMultiError(errors)
	}

	return nil
}

// TrainingMultiError is an error wrapping multiple validation errors returned
// by Training.ValidateAll() if the designated constraints aren't met.
type TrainingMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TrainingMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TrainingMultiError) AllErrors() []error { return m }

// TrainingValidationError is the validation error returned by
// Training.Validate if the designated constraints aren't met.
type TrainingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TrainingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TrainingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TrainingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TrainingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TrainingValidationError) ErrorName() string { return "TrainingValidationError" }

// Error satisfies the builtin error interface
func (e TrainingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTraining.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TrainingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TrainingValidationError{}
