// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: learn_control.proto

package learn_control

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	LearnControl_GetEmployeesByName_FullMethodName         = "/github.com.Artenso.learn_control.api.learn_control.LearnControl/GetEmployeesByName"
	LearnControl_GetEmployee_FullMethodName                = "/github.com.Artenso.learn_control.api.learn_control.LearnControl/GetEmployee"
	LearnControl_SetEmployeeTrainingDate_FullMethodName    = "/github.com.Artenso.learn_control.api.learn_control.LearnControl/SetEmployeeTrainingDate"
	LearnControl_UpdateEmployeeTrainingDate_FullMethodName = "/github.com.Artenso.learn_control.api.learn_control.LearnControl/UpdateEmployeeTrainingDate"
	LearnControl_GetFilters_FullMethodName                 = "/github.com.Artenso.learn_control.api.learn_control.LearnControl/GetFilters"
	LearnControl_GetEmployees_FullMethodName               = "/github.com.Artenso.learn_control.api.learn_control.LearnControl/GetEmployees"
)

// LearnControlClient is the client API for LearnControl service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LearnControlClient interface {
	GetEmployeesByName(ctx context.Context, in *GetEmployeesByNameRequest, opts ...grpc.CallOption) (*GetEmployeesByNameResponse, error)
	GetEmployee(ctx context.Context, in *GetEmployeeRequest, opts ...grpc.CallOption) (*GetEmployeeResponse, error)
	SetEmployeeTrainingDate(ctx context.Context, in *SetEmployeeTrainingDateRequest, opts ...grpc.CallOption) (*SetEmployeeTrainingDateResponse, error)
	UpdateEmployeeTrainingDate(ctx context.Context, in *UpdateEmployeeTrainingDateRequest, opts ...grpc.CallOption) (*UpdateEmployeeTrainingDateResponse, error)
	GetFilters(ctx context.Context, in *GetFiltersRequest, opts ...grpc.CallOption) (*GetFiltersResponse, error)
	GetEmployees(ctx context.Context, in *GetEmployeesRequest, opts ...grpc.CallOption) (*GetEmployeesResponse, error)
}

type learnControlClient struct {
	cc grpc.ClientConnInterface
}

func NewLearnControlClient(cc grpc.ClientConnInterface) LearnControlClient {
	return &learnControlClient{cc}
}

func (c *learnControlClient) GetEmployeesByName(ctx context.Context, in *GetEmployeesByNameRequest, opts ...grpc.CallOption) (*GetEmployeesByNameResponse, error) {
	out := new(GetEmployeesByNameResponse)
	err := c.cc.Invoke(ctx, LearnControl_GetEmployeesByName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learnControlClient) GetEmployee(ctx context.Context, in *GetEmployeeRequest, opts ...grpc.CallOption) (*GetEmployeeResponse, error) {
	out := new(GetEmployeeResponse)
	err := c.cc.Invoke(ctx, LearnControl_GetEmployee_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learnControlClient) SetEmployeeTrainingDate(ctx context.Context, in *SetEmployeeTrainingDateRequest, opts ...grpc.CallOption) (*SetEmployeeTrainingDateResponse, error) {
	out := new(SetEmployeeTrainingDateResponse)
	err := c.cc.Invoke(ctx, LearnControl_SetEmployeeTrainingDate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learnControlClient) UpdateEmployeeTrainingDate(ctx context.Context, in *UpdateEmployeeTrainingDateRequest, opts ...grpc.CallOption) (*UpdateEmployeeTrainingDateResponse, error) {
	out := new(UpdateEmployeeTrainingDateResponse)
	err := c.cc.Invoke(ctx, LearnControl_UpdateEmployeeTrainingDate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learnControlClient) GetFilters(ctx context.Context, in *GetFiltersRequest, opts ...grpc.CallOption) (*GetFiltersResponse, error) {
	out := new(GetFiltersResponse)
	err := c.cc.Invoke(ctx, LearnControl_GetFilters_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learnControlClient) GetEmployees(ctx context.Context, in *GetEmployeesRequest, opts ...grpc.CallOption) (*GetEmployeesResponse, error) {
	out := new(GetEmployeesResponse)
	err := c.cc.Invoke(ctx, LearnControl_GetEmployees_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LearnControlServer is the server API for LearnControl service.
// All implementations must embed UnimplementedLearnControlServer
// for forward compatibility
type LearnControlServer interface {
	GetEmployeesByName(context.Context, *GetEmployeesByNameRequest) (*GetEmployeesByNameResponse, error)
	GetEmployee(context.Context, *GetEmployeeRequest) (*GetEmployeeResponse, error)
	SetEmployeeTrainingDate(context.Context, *SetEmployeeTrainingDateRequest) (*SetEmployeeTrainingDateResponse, error)
	UpdateEmployeeTrainingDate(context.Context, *UpdateEmployeeTrainingDateRequest) (*UpdateEmployeeTrainingDateResponse, error)
	GetFilters(context.Context, *GetFiltersRequest) (*GetFiltersResponse, error)
	GetEmployees(context.Context, *GetEmployeesRequest) (*GetEmployeesResponse, error)
	mustEmbedUnimplementedLearnControlServer()
}

// UnimplementedLearnControlServer must be embedded to have forward compatible implementations.
type UnimplementedLearnControlServer struct {
}

func (UnimplementedLearnControlServer) GetEmployeesByName(context.Context, *GetEmployeesByNameRequest) (*GetEmployeesByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmployeesByName not implemented")
}
func (UnimplementedLearnControlServer) GetEmployee(context.Context, *GetEmployeeRequest) (*GetEmployeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmployee not implemented")
}
func (UnimplementedLearnControlServer) SetEmployeeTrainingDate(context.Context, *SetEmployeeTrainingDateRequest) (*SetEmployeeTrainingDateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetEmployeeTrainingDate not implemented")
}
func (UnimplementedLearnControlServer) UpdateEmployeeTrainingDate(context.Context, *UpdateEmployeeTrainingDateRequest) (*UpdateEmployeeTrainingDateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEmployeeTrainingDate not implemented")
}
func (UnimplementedLearnControlServer) GetFilters(context.Context, *GetFiltersRequest) (*GetFiltersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFilters not implemented")
}
func (UnimplementedLearnControlServer) GetEmployees(context.Context, *GetEmployeesRequest) (*GetEmployeesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmployees not implemented")
}
func (UnimplementedLearnControlServer) mustEmbedUnimplementedLearnControlServer() {}

// UnsafeLearnControlServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LearnControlServer will
// result in compilation errors.
type UnsafeLearnControlServer interface {
	mustEmbedUnimplementedLearnControlServer()
}

func RegisterLearnControlServer(s grpc.ServiceRegistrar, srv LearnControlServer) {
	s.RegisterService(&LearnControl_ServiceDesc, srv)
}

func _LearnControl_GetEmployeesByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEmployeesByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearnControlServer).GetEmployeesByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LearnControl_GetEmployeesByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearnControlServer).GetEmployeesByName(ctx, req.(*GetEmployeesByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearnControl_GetEmployee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEmployeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearnControlServer).GetEmployee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LearnControl_GetEmployee_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearnControlServer).GetEmployee(ctx, req.(*GetEmployeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearnControl_SetEmployeeTrainingDate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetEmployeeTrainingDateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearnControlServer).SetEmployeeTrainingDate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LearnControl_SetEmployeeTrainingDate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearnControlServer).SetEmployeeTrainingDate(ctx, req.(*SetEmployeeTrainingDateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearnControl_UpdateEmployeeTrainingDate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEmployeeTrainingDateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearnControlServer).UpdateEmployeeTrainingDate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LearnControl_UpdateEmployeeTrainingDate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearnControlServer).UpdateEmployeeTrainingDate(ctx, req.(*UpdateEmployeeTrainingDateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearnControl_GetFilters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFiltersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearnControlServer).GetFilters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LearnControl_GetFilters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearnControlServer).GetFilters(ctx, req.(*GetFiltersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearnControl_GetEmployees_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEmployeesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearnControlServer).GetEmployees(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LearnControl_GetEmployees_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearnControlServer).GetEmployees(ctx, req.(*GetEmployeesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LearnControl_ServiceDesc is the grpc.ServiceDesc for LearnControl service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LearnControl_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.Artenso.learn_control.api.learn_control.LearnControl",
	HandlerType: (*LearnControlServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEmployeesByName",
			Handler:    _LearnControl_GetEmployeesByName_Handler,
		},
		{
			MethodName: "GetEmployee",
			Handler:    _LearnControl_GetEmployee_Handler,
		},
		{
			MethodName: "SetEmployeeTrainingDate",
			Handler:    _LearnControl_SetEmployeeTrainingDate_Handler,
		},
		{
			MethodName: "UpdateEmployeeTrainingDate",
			Handler:    _LearnControl_UpdateEmployeeTrainingDate_Handler,
		},
		{
			MethodName: "GetFilters",
			Handler:    _LearnControl_GetFilters_Handler,
		},
		{
			MethodName: "GetEmployees",
			Handler:    _LearnControl_GetEmployees_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "learn_control.proto",
}
