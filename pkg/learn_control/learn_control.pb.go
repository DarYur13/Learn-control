// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v3.21.12
// source: learn_control.proto

package learn_control

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TaskType int32

const (
	TaskType_UNKNOWN_TASK TaskType = 0
	TaskType_PROVIDE      TaskType = 1
	TaskType_ASSIGN       TaskType = 2
	TaskType_CHOOSE       TaskType = 3
	TaskType_SET          TaskType = 4
	TaskType_CONFIRM      TaskType = 5
	TaskType_CONTROL      TaskType = 6
)

// Enum value maps for TaskType.
var (
	TaskType_name = map[int32]string{
		0: "UNKNOWN_TASK",
		1: "PROVIDE",
		2: "ASSIGN",
		3: "CHOOSE",
		4: "SET",
		5: "CONFIRM",
		6: "CONTROL",
	}
	TaskType_value = map[string]int32{
		"UNKNOWN_TASK": 0,
		"PROVIDE":      1,
		"ASSIGN":       2,
		"CHOOSE":       3,
		"SET":          4,
		"CONFIRM":      5,
		"CONTROL":      6,
	}
)

func (x TaskType) Enum() *TaskType {
	p := new(TaskType)
	*p = x
	return p
}

func (x TaskType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskType) Descriptor() protoreflect.EnumDescriptor {
	return file_learn_control_proto_enumTypes[0].Descriptor()
}

func (TaskType) Type() protoreflect.EnumType {
	return &file_learn_control_proto_enumTypes[0]
}

func (x TaskType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskType.Descriptor instead.
func (TaskType) EnumDescriptor() ([]byte, []int) {
	return file_learn_control_proto_rawDescGZIP(), []int{0}
}

type TrainingType int32

const (
	TrainingType_UNKNOWN_TRAINING TrainingType = 0
	TrainingType_INTRODUCTORY     TrainingType = 1
	TrainingType_INITIAL          TrainingType = 2
	TrainingType_REFRESHER        TrainingType = 3
	TrainingType_REGULAR          TrainingType = 4
)

// Enum value maps for TrainingType.
var (
	TrainingType_name = map[int32]string{
		0: "UNKNOWN_TRAINING",
		1: "INTRODUCTORY",
		2: "INITIAL",
		3: "REFRESHER",
		4: "REGULAR",
	}
	TrainingType_value = map[string]int32{
		"UNKNOWN_TRAINING": 0,
		"INTRODUCTORY":     1,
		"INITIAL":          2,
		"REFRESHER":        3,
		"REGULAR":          4,
	}
)

func (x TrainingType) Enum() *TrainingType {
	p := new(TrainingType)
	*p = x
	return p
}

func (x TrainingType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TrainingType) Descriptor() protoreflect.EnumDescriptor {
	return file_learn_control_proto_enumTypes[1].Descriptor()
}

func (TrainingType) Type() protoreflect.EnumType {
	return &file_learn_control_proto_enumTypes[1]
}

func (x TrainingType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TrainingType.Descriptor instead.
func (TrainingType) EnumDescriptor() ([]byte, []int) {
	return file_learn_control_proto_rawDescGZIP(), []int{1}
}

type CloseTaskWithTrainingProtocolConfirmRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID int64 `protobuf:"varint,1,opt,name=taskID,proto3" json:"taskID,omitempty"`
}

func (x *CloseTaskWithTrainingProtocolConfirmRequest) Reset() {
	*x = CloseTaskWithTrainingProtocolConfirmRequest{}
	mi := &file_learn_control_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CloseTaskWithTrainingProtocolConfirmRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseTaskWithTrainingProtocolConfirmRequest) ProtoMessage() {}

func (x *CloseTaskWithTrainingProtocolConfirmRequest) ProtoReflect() protoreflect.Message {
	mi := &file_learn_control_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseTaskWithTrainingProtocolConfirmRequest.ProtoReflect.Descriptor instead.
func (*CloseTaskWithTrainingProtocolConfirmRequest) Descriptor() ([]byte, []int) {
	return file_learn_control_proto_rawDescGZIP(), []int{0}
}

func (x *CloseTaskWithTrainingProtocolConfirmRequest) GetTaskID() int64 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

type CloseTaskWithPositionTrainingsSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID       int64   `protobuf:"varint,1,opt,name=taskID,proto3" json:"taskID,omitempty"`
	TrainingsIDs []int64 `protobuf:"varint,2,rep,packed,name=trainingsIDs,proto3" json:"trainingsIDs,omitempty"`
}

func (x *CloseTaskWithPositionTrainingsSetRequest) Reset() {
	*x = CloseTaskWithPositionTrainingsSetRequest{}
	mi := &file_learn_control_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CloseTaskWithPositionTrainingsSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseTaskWithPositionTrainingsSetRequest) ProtoMessage() {}

func (x *CloseTaskWithPositionTrainingsSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_learn_control_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseTaskWithPositionTrainingsSetRequest.ProtoReflect.Descriptor instead.
func (*CloseTaskWithPositionTrainingsSetRequest) Descriptor() ([]byte, []int) {
	return file_learn_control_proto_rawDescGZIP(), []int{1}
}

func (x *CloseTaskWithPositionTrainingsSetRequest) GetTaskID() int64 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

func (x *CloseTaskWithPositionTrainingsSetRequest) GetTrainingsIDs() []int64 {
	if x != nil {
		return x.TrainingsIDs
	}
	return nil
}

type CloseTaskWithTrainingDateSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID   int64                  `protobuf:"varint,1,opt,name=taskID,proto3" json:"taskID,omitempty"`
	Date     *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=date,proto3" json:"date,omitempty"`
	TaskType TaskType               `protobuf:"varint,3,opt,name=taskType,proto3,enum=github.com.DarYur13.learn_control.api.learn_control.TaskType" json:"taskType,omitempty"`
}

func (x *CloseTaskWithTrainingDateSetRequest) Reset() {
	*x = CloseTaskWithTrainingDateSetRequest{}
	mi := &file_learn_control_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CloseTaskWithTrainingDateSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseTaskWithTrainingDateSetRequest) ProtoMessage() {}

func (x *CloseTaskWithTrainingDateSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_learn_control_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseTaskWithTrainingDateSetRequest.ProtoReflect.Descriptor instead.
func (*CloseTaskWithTrainingDateSetRequest) Descriptor() ([]byte, []int) {
	return file_learn_control_proto_rawDescGZIP(), []int{2}
}

func (x *CloseTaskWithTrainingDateSetRequest) GetTaskID() int64 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

func (x *CloseTaskWithTrainingDateSetRequest) GetDate() *timestamppb.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *CloseTaskWithTrainingDateSetRequest) GetTaskType() TaskType {
	if x != nil {
		return x.TaskType
	}
	return TaskType_UNKNOWN_TASK
}

type CloseAssignTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID   int64    `protobuf:"varint,1,opt,name=taskID,proto3" json:"taskID,omitempty"`
	TaskType TaskType `protobuf:"varint,2,opt,name=taskType,proto3,enum=github.com.DarYur13.learn_control.api.learn_control.TaskType" json:"taskType,omitempty"`
}

func (x *CloseAssignTaskRequest) Reset() {
	*x = CloseAssignTaskRequest{}
	mi := &file_learn_control_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CloseAssignTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseAssignTaskRequest) ProtoMessage() {}

func (x *CloseAssignTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_learn_control_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseAssignTaskRequest.ProtoReflect.Descriptor instead.
func (*CloseAssignTaskRequest) Descriptor() ([]byte, []int) {
	return file_learn_control_proto_rawDescGZIP(), []int{3}
}

func (x *CloseAssignTaskRequest) GetTaskID() int64 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

func (x *CloseAssignTaskRequest) GetTaskType() TaskType {
	if x != nil {
		return x.TaskType
	}
	return TaskType_UNKNOWN_TASK
}

type GetTasksByFiltersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Done *bool `protobuf:"varint,1,opt,name=done,proto3,oneof" json:"done,omitempty"`
}

func (x *GetTasksByFiltersRequest) Reset() {
	*x = GetTasksByFiltersRequest{}
	mi := &file_learn_control_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTasksByFiltersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTasksByFiltersRequest) ProtoMessage() {}

func (x *GetTasksByFiltersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_learn_control_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTasksByFiltersRequest.ProtoReflect.Descriptor instead.
func (*GetTasksByFiltersRequest) Descriptor() ([]byte, []int) {
	return file_learn_control_proto_rawDescGZIP(), []int{4}
}

func (x *GetTasksByFiltersRequest) GetDone() bool {
	if x != nil && x.Done != nil {
		return *x.Done
	}
	return false
}

type GetTasksByFiltersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tasks []*Task `protobuf:"bytes,1,rep,name=tasks,proto3" json:"tasks,omitempty"`
}

func (x *GetTasksByFiltersResponse) Reset() {
	*x = GetTasksByFiltersResponse{}
	mi := &file_learn_control_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTasksByFiltersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTasksByFiltersResponse) ProtoMessage() {}

func (x *GetTasksByFiltersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_learn_control_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTasksByFiltersResponse.ProtoReflect.Descriptor instead.
func (*GetTasksByFiltersResponse) Descriptor() ([]byte, []int) {
	return file_learn_control_proto_rawDescGZIP(), []int{5}
}

func (x *GetTasksByFiltersResponse) GetTasks() []*Task {
	if x != nil {
		return x.Tasks
	}
	return nil
}

type Task struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Type             TaskType `protobuf:"varint,2,opt,name=type,proto3,enum=github.com.DarYur13.learn_control.api.learn_control.TaskType" json:"type,omitempty"`
	Description      string   `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Employee         string   `protobuf:"bytes,4,opt,name=employee,proto3" json:"employee,omitempty"`
	Training         string   `protobuf:"bytes,5,opt,name=training,proto3" json:"training,omitempty"`
	Position         string   `protobuf:"bytes,6,opt,name=position,proto3" json:"position,omitempty"`
	Department       string   `protobuf:"bytes,7,opt,name=department,proto3" json:"department,omitempty"`
	Executor         string   `protobuf:"bytes,8,opt,name=executor,proto3" json:"executor,omitempty"`
	DownloadFileLink string   `protobuf:"bytes,9,opt,name=downloadFileLink,proto3" json:"downloadFileLink,omitempty"`
	Done             bool     `protobuf:"varint,10,opt,name=done,proto3" json:"done,omitempty"`
}

func (x *Task) Reset() {
	*x = Task{}
	mi := &file_learn_control_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task) ProtoMessage() {}

func (x *Task) ProtoReflect() protoreflect.Message {
	mi := &file_learn_control_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task.ProtoReflect.Descriptor instead.
func (*Task) Descriptor() ([]byte, []int) {
	return file_learn_control_proto_rawDescGZIP(), []int{6}
}

func (x *Task) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Task) GetType() TaskType {
	if x != nil {
		return x.Type
	}
	return TaskType_UNKNOWN_TASK
}

func (x *Task) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Task) GetEmployee() string {
	if x != nil {
		return x.Employee
	}
	return ""
}

func (x *Task) GetTraining() string {
	if x != nil {
		return x.Training
	}
	return ""
}

func (x *Task) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

func (x *Task) GetDepartment() string {
	if x != nil {
		return x.Department
	}
	return ""
}

func (x *Task) GetExecutor() string {
	if x != nil {
		return x.Executor
	}
	return ""
}

func (x *Task) GetDownloadFileLink() string {
	if x != nil {
		return x.DownloadFileLink
	}
	return ""
}

func (x *Task) GetDone() bool {
	if x != nil {
		return x.Done
	}
	return false
}

type AddEmployeeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fullname       string                 `protobuf:"bytes,1,opt,name=fullname,proto3" json:"fullname,omitempty"`
	Birthdate      *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=birthdate,proto3" json:"birthdate,omitempty"`
	Department     string                 `protobuf:"bytes,3,opt,name=department,proto3" json:"department,omitempty"`
	Position       string                 `protobuf:"bytes,4,opt,name=position,proto3" json:"position,omitempty"`
	EmploymentDate *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=employmentDate,proto3" json:"employmentDate,omitempty"`
	Snils          string                 `protobuf:"bytes,6,opt,name=snils,proto3" json:"snils,omitempty"`
	Email          string                 `protobuf:"bytes,7,opt,name=email,proto3" json:"email,omitempty"`
}

func (x *AddEmployeeRequest) Reset() {
	*x = AddEmployeeRequest{}
	mi := &file_learn_control_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddEmployeeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddEmployeeRequest) ProtoMessage() {}

func (x *AddEmployeeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_learn_control_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddEmployeeRequest.ProtoReflect.Descriptor instead.
func (*AddEmployeeRequest) Descriptor() ([]byte, []int) {
	return file_learn_control_proto_rawDescGZIP(), []int{7}
}

func (x *AddEmployeeRequest) GetFullname() string {
	if x != nil {
		return x.Fullname
	}
	return ""
}

func (x *AddEmployeeRequest) GetBirthdate() *timestamppb.Timestamp {
	if x != nil {
		return x.Birthdate
	}
	return nil
}

func (x *AddEmployeeRequest) GetDepartment() string {
	if x != nil {
		return x.Department
	}
	return ""
}

func (x *AddEmployeeRequest) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

func (x *AddEmployeeRequest) GetEmploymentDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EmploymentDate
	}
	return nil
}

func (x *AddEmployeeRequest) GetSnils() string {
	if x != nil {
		return x.Snils
	}
	return ""
}

func (x *AddEmployeeRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type GetEmployeesByNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetEmployeesByNameRequest) Reset() {
	*x = GetEmployeesByNameRequest{}
	mi := &file_learn_control_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetEmployeesByNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEmployeesByNameRequest) ProtoMessage() {}

func (x *GetEmployeesByNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_learn_control_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEmployeesByNameRequest.ProtoReflect.Descriptor instead.
func (*GetEmployeesByNameRequest) Descriptor() ([]byte, []int) {
	return file_learn_control_proto_rawDescGZIP(), []int{8}
}

func (x *GetEmployeesByNameRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetEmployeesByNameResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Employees []*EmployeeBaseInfo `protobuf:"bytes,1,rep,name=employees,proto3" json:"employees,omitempty"`
}

func (x *GetEmployeesByNameResponse) Reset() {
	*x = GetEmployeesByNameResponse{}
	mi := &file_learn_control_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetEmployeesByNameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEmployeesByNameResponse) ProtoMessage() {}

func (x *GetEmployeesByNameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_learn_control_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEmployeesByNameResponse.ProtoReflect.Descriptor instead.
func (*GetEmployeesByNameResponse) Descriptor() ([]byte, []int) {
	return file_learn_control_proto_rawDescGZIP(), []int{9}
}

func (x *GetEmployeesByNameResponse) GetEmployees() []*EmployeeBaseInfo {
	if x != nil {
		return x.Employees
	}
	return nil
}

type EmployeeBaseInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Fullname  string                 `protobuf:"bytes,2,opt,name=fullname,proto3" json:"fullname,omitempty"`
	Birthdate *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=birthdate,proto3" json:"birthdate,omitempty"`
}

func (x *EmployeeBaseInfo) Reset() {
	*x = EmployeeBaseInfo{}
	mi := &file_learn_control_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EmployeeBaseInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmployeeBaseInfo) ProtoMessage() {}

func (x *EmployeeBaseInfo) ProtoReflect() protoreflect.Message {
	mi := &file_learn_control_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmployeeBaseInfo.ProtoReflect.Descriptor instead.
func (*EmployeeBaseInfo) Descriptor() ([]byte, []int) {
	return file_learn_control_proto_rawDescGZIP(), []int{10}
}

func (x *EmployeeBaseInfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *EmployeeBaseInfo) GetFullname() string {
	if x != nil {
		return x.Fullname
	}
	return ""
}

func (x *EmployeeBaseInfo) GetBirthdate() *timestamppb.Timestamp {
	if x != nil {
		return x.Birthdate
	}
	return nil
}

type GetEmployeePersonalCardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetEmployeePersonalCardRequest) Reset() {
	*x = GetEmployeePersonalCardRequest{}
	mi := &file_learn_control_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetEmployeePersonalCardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEmployeePersonalCardRequest) ProtoMessage() {}

func (x *GetEmployeePersonalCardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_learn_control_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEmployeePersonalCardRequest.ProtoReflect.Descriptor instead.
func (*GetEmployeePersonalCardRequest) Descriptor() ([]byte, []int) {
	return file_learn_control_proto_rawDescGZIP(), []int{11}
}

func (x *GetEmployeePersonalCardRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetEmployeePersonalCardResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EmployeeID     int64                  `protobuf:"varint,1,opt,name=employeeID,proto3" json:"employeeID,omitempty"`
	Fullname       string                 `protobuf:"bytes,2,opt,name=fullname,proto3" json:"fullname,omitempty"`
	Birthdate      *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=birthdate,proto3" json:"birthdate,omitempty"`
	Department     string                 `protobuf:"bytes,4,opt,name=department,proto3" json:"department,omitempty"`
	Position       string                 `protobuf:"bytes,5,opt,name=position,proto3" json:"position,omitempty"`
	EmploymentDate *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=employmentDate,proto3" json:"employmentDate,omitempty"`
	Snils          string                 `protobuf:"bytes,7,opt,name=snils,proto3" json:"snils,omitempty"`
	Trainings      []*Training            `protobuf:"bytes,8,rep,name=trainings,proto3" json:"trainings,omitempty"`
}

func (x *GetEmployeePersonalCardResponse) Reset() {
	*x = GetEmployeePersonalCardResponse{}
	mi := &file_learn_control_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetEmployeePersonalCardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEmployeePersonalCardResponse) ProtoMessage() {}

func (x *GetEmployeePersonalCardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_learn_control_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEmployeePersonalCardResponse.ProtoReflect.Descriptor instead.
func (*GetEmployeePersonalCardResponse) Descriptor() ([]byte, []int) {
	return file_learn_control_proto_rawDescGZIP(), []int{12}
}

func (x *GetEmployeePersonalCardResponse) GetEmployeeID() int64 {
	if x != nil {
		return x.EmployeeID
	}
	return 0
}

func (x *GetEmployeePersonalCardResponse) GetFullname() string {
	if x != nil {
		return x.Fullname
	}
	return ""
}

func (x *GetEmployeePersonalCardResponse) GetBirthdate() *timestamppb.Timestamp {
	if x != nil {
		return x.Birthdate
	}
	return nil
}

func (x *GetEmployeePersonalCardResponse) GetDepartment() string {
	if x != nil {
		return x.Department
	}
	return ""
}

func (x *GetEmployeePersonalCardResponse) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

func (x *GetEmployeePersonalCardResponse) GetEmploymentDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EmploymentDate
	}
	return nil
}

func (x *GetEmployeePersonalCardResponse) GetSnils() string {
	if x != nil {
		return x.Snils
	}
	return ""
}

func (x *GetEmployeePersonalCardResponse) GetTrainings() []*Training {
	if x != nil {
		return x.Trainings
	}
	return nil
}

type Training struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type        TrainingType           `protobuf:"varint,3,opt,name=type,proto3,enum=github.com.DarYur13.learn_control.api.learn_control.TrainingType" json:"type,omitempty"`
	PassDate    *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=passDate,proto3" json:"passDate,omitempty"`
	RePassDate  *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=rePassDate,proto3" json:"rePassDate,omitempty"`
	HasProtocol string                 `protobuf:"bytes,6,opt,name=hasProtocol,proto3" json:"hasProtocol,omitempty"`
}

func (x *Training) Reset() {
	*x = Training{}
	mi := &file_learn_control_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Training) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Training) ProtoMessage() {}

func (x *Training) ProtoReflect() protoreflect.Message {
	mi := &file_learn_control_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Training.ProtoReflect.Descriptor instead.
func (*Training) Descriptor() ([]byte, []int) {
	return file_learn_control_proto_rawDescGZIP(), []int{13}
}

func (x *Training) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Training) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Training) GetType() TrainingType {
	if x != nil {
		return x.Type
	}
	return TrainingType_UNKNOWN_TRAINING
}

func (x *Training) GetPassDate() *timestamppb.Timestamp {
	if x != nil {
		return x.PassDate
	}
	return nil
}

func (x *Training) GetRePassDate() *timestamppb.Timestamp {
	if x != nil {
		return x.RePassDate
	}
	return nil
}

func (x *Training) GetHasProtocol() string {
	if x != nil {
		return x.HasProtocol
	}
	return ""
}

type UpdateEmployeeTrainingDateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EmployeeID int64                  `protobuf:"varint,1,opt,name=employeeID,proto3" json:"employeeID,omitempty"`
	TrainingID int64                  `protobuf:"varint,2,opt,name=trainingID,proto3" json:"trainingID,omitempty"`
	Date       *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=date,proto3" json:"date,omitempty"`
}

func (x *UpdateEmployeeTrainingDateRequest) Reset() {
	*x = UpdateEmployeeTrainingDateRequest{}
	mi := &file_learn_control_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateEmployeeTrainingDateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateEmployeeTrainingDateRequest) ProtoMessage() {}

func (x *UpdateEmployeeTrainingDateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_learn_control_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateEmployeeTrainingDateRequest.ProtoReflect.Descriptor instead.
func (*UpdateEmployeeTrainingDateRequest) Descriptor() ([]byte, []int) {
	return file_learn_control_proto_rawDescGZIP(), []int{14}
}

func (x *UpdateEmployeeTrainingDateRequest) GetEmployeeID() int64 {
	if x != nil {
		return x.EmployeeID
	}
	return 0
}

func (x *UpdateEmployeeTrainingDateRequest) GetTrainingID() int64 {
	if x != nil {
		return x.TrainingID
	}
	return 0
}

func (x *UpdateEmployeeTrainingDateRequest) GetDate() *timestamppb.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

type UpdateEmployeeTrainingDateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PassDate   *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=passDate,proto3" json:"passDate,omitempty"`
	RePassDate *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=rePassDate,proto3" json:"rePassDate,omitempty"`
}

func (x *UpdateEmployeeTrainingDateResponse) Reset() {
	*x = UpdateEmployeeTrainingDateResponse{}
	mi := &file_learn_control_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateEmployeeTrainingDateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateEmployeeTrainingDateResponse) ProtoMessage() {}

func (x *UpdateEmployeeTrainingDateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_learn_control_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateEmployeeTrainingDateResponse.ProtoReflect.Descriptor instead.
func (*UpdateEmployeeTrainingDateResponse) Descriptor() ([]byte, []int) {
	return file_learn_control_proto_rawDescGZIP(), []int{15}
}

func (x *UpdateEmployeeTrainingDateResponse) GetPassDate() *timestamppb.Timestamp {
	if x != nil {
		return x.PassDate
	}
	return nil
}

func (x *UpdateEmployeeTrainingDateResponse) GetRePassDate() *timestamppb.Timestamp {
	if x != nil {
		return x.RePassDate
	}
	return nil
}

type GetEmployeesByFiltersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Department        *string                `protobuf:"bytes,1,opt,name=department,proto3,oneof" json:"department,omitempty"`
	Position          *string                `protobuf:"bytes,2,opt,name=position,proto3,oneof" json:"position,omitempty"`
	TrainingID        *int64                 `protobuf:"varint,3,opt,name=trainingID,proto3,oneof" json:"trainingID,omitempty"`
	RetrainingIn      *int64                 `protobuf:"varint,4,opt,name=retrainingIn,proto3,oneof" json:"retrainingIn,omitempty"`
	TrainigsNotPassed *bool                  `protobuf:"varint,5,opt,name=trainigsNotPassed,proto3,oneof" json:"trainigsNotPassed,omitempty"`
	DateFrom          *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=dateFrom,proto3,oneof" json:"dateFrom,omitempty"`
	DateTo            *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=dateTo,proto3,oneof" json:"dateTo,omitempty"`
	HasProtocol       *bool                  `protobuf:"varint,8,opt,name=hasProtocol,proto3,oneof" json:"hasProtocol,omitempty"`
}

func (x *GetEmployeesByFiltersRequest) Reset() {
	*x = GetEmployeesByFiltersRequest{}
	mi := &file_learn_control_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetEmployeesByFiltersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEmployeesByFiltersRequest) ProtoMessage() {}

func (x *GetEmployeesByFiltersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_learn_control_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEmployeesByFiltersRequest.ProtoReflect.Descriptor instead.
func (*GetEmployeesByFiltersRequest) Descriptor() ([]byte, []int) {
	return file_learn_control_proto_rawDescGZIP(), []int{16}
}

func (x *GetEmployeesByFiltersRequest) GetDepartment() string {
	if x != nil && x.Department != nil {
		return *x.Department
	}
	return ""
}

func (x *GetEmployeesByFiltersRequest) GetPosition() string {
	if x != nil && x.Position != nil {
		return *x.Position
	}
	return ""
}

func (x *GetEmployeesByFiltersRequest) GetTrainingID() int64 {
	if x != nil && x.TrainingID != nil {
		return *x.TrainingID
	}
	return 0
}

func (x *GetEmployeesByFiltersRequest) GetRetrainingIn() int64 {
	if x != nil && x.RetrainingIn != nil {
		return *x.RetrainingIn
	}
	return 0
}

func (x *GetEmployeesByFiltersRequest) GetTrainigsNotPassed() bool {
	if x != nil && x.TrainigsNotPassed != nil {
		return *x.TrainigsNotPassed
	}
	return false
}

func (x *GetEmployeesByFiltersRequest) GetDateFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.DateFrom
	}
	return nil
}

func (x *GetEmployeesByFiltersRequest) GetDateTo() *timestamppb.Timestamp {
	if x != nil {
		return x.DateTo
	}
	return nil
}

func (x *GetEmployeesByFiltersRequest) GetHasProtocol() bool {
	if x != nil && x.HasProtocol != nil {
		return *x.HasProtocol
	}
	return false
}

type GetEmployeesByFiltersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Employees []*EmployeeInfo `protobuf:"bytes,1,rep,name=employees,proto3" json:"employees,omitempty"`
}

func (x *GetEmployeesByFiltersResponse) Reset() {
	*x = GetEmployeesByFiltersResponse{}
	mi := &file_learn_control_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetEmployeesByFiltersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEmployeesByFiltersResponse) ProtoMessage() {}

func (x *GetEmployeesByFiltersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_learn_control_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEmployeesByFiltersResponse.ProtoReflect.Descriptor instead.
func (*GetEmployeesByFiltersResponse) Descriptor() ([]byte, []int) {
	return file_learn_control_proto_rawDescGZIP(), []int{17}
}

func (x *GetEmployeesByFiltersResponse) GetEmployees() []*EmployeeInfo {
	if x != nil {
		return x.Employees
	}
	return nil
}

type EmployeeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fullname   string      `protobuf:"bytes,1,opt,name=fullname,proto3" json:"fullname,omitempty"`
	Department string      `protobuf:"bytes,2,opt,name=department,proto3" json:"department,omitempty"`
	Position   string      `protobuf:"bytes,3,opt,name=position,proto3" json:"position,omitempty"`
	Trainings  []*Training `protobuf:"bytes,4,rep,name=trainings,proto3" json:"trainings,omitempty"`
}

func (x *EmployeeInfo) Reset() {
	*x = EmployeeInfo{}
	mi := &file_learn_control_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EmployeeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmployeeInfo) ProtoMessage() {}

func (x *EmployeeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_learn_control_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmployeeInfo.ProtoReflect.Descriptor instead.
func (*EmployeeInfo) Descriptor() ([]byte, []int) {
	return file_learn_control_proto_rawDescGZIP(), []int{18}
}

func (x *EmployeeInfo) GetFullname() string {
	if x != nil {
		return x.Fullname
	}
	return ""
}

func (x *EmployeeInfo) GetDepartment() string {
	if x != nil {
		return x.Department
	}
	return ""
}

func (x *EmployeeInfo) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

func (x *EmployeeInfo) GetTrainings() []*Training {
	if x != nil {
		return x.Trainings
	}
	return nil
}

type GetDepartmentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Departments []string `protobuf:"bytes,1,rep,name=departments,proto3" json:"departments,omitempty"`
}

func (x *GetDepartmentsResponse) Reset() {
	*x = GetDepartmentsResponse{}
	mi := &file_learn_control_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDepartmentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDepartmentsResponse) ProtoMessage() {}

func (x *GetDepartmentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_learn_control_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDepartmentsResponse.ProtoReflect.Descriptor instead.
func (*GetDepartmentsResponse) Descriptor() ([]byte, []int) {
	return file_learn_control_proto_rawDescGZIP(), []int{19}
}

func (x *GetDepartmentsResponse) GetDepartments() []string {
	if x != nil {
		return x.Departments
	}
	return nil
}

type GetPositionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Positions []string `protobuf:"bytes,1,rep,name=positions,proto3" json:"positions,omitempty"`
}

func (x *GetPositionsResponse) Reset() {
	*x = GetPositionsResponse{}
	mi := &file_learn_control_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPositionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPositionsResponse) ProtoMessage() {}

func (x *GetPositionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_learn_control_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPositionsResponse.ProtoReflect.Descriptor instead.
func (*GetPositionsResponse) Descriptor() ([]byte, []int) {
	return file_learn_control_proto_rawDescGZIP(), []int{20}
}

func (x *GetPositionsResponse) GetPositions() []string {
	if x != nil {
		return x.Positions
	}
	return nil
}

type GetTrainingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Trainings []*TrainingBaseInfo `protobuf:"bytes,3,rep,name=trainings,proto3" json:"trainings,omitempty"`
}

func (x *GetTrainingsResponse) Reset() {
	*x = GetTrainingsResponse{}
	mi := &file_learn_control_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTrainingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTrainingsResponse) ProtoMessage() {}

func (x *GetTrainingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_learn_control_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTrainingsResponse.ProtoReflect.Descriptor instead.
func (*GetTrainingsResponse) Descriptor() ([]byte, []int) {
	return file_learn_control_proto_rawDescGZIP(), []int{21}
}

func (x *GetTrainingsResponse) GetTrainings() []*TrainingBaseInfo {
	if x != nil {
		return x.Trainings
	}
	return nil
}

type TrainingBaseInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int64        `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string       `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type TrainingType `protobuf:"varint,3,opt,name=type,proto3,enum=github.com.DarYur13.learn_control.api.learn_control.TrainingType" json:"type,omitempty"`
}

func (x *TrainingBaseInfo) Reset() {
	*x = TrainingBaseInfo{}
	mi := &file_learn_control_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrainingBaseInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrainingBaseInfo) ProtoMessage() {}

func (x *TrainingBaseInfo) ProtoReflect() protoreflect.Message {
	mi := &file_learn_control_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrainingBaseInfo.ProtoReflect.Descriptor instead.
func (*TrainingBaseInfo) Descriptor() ([]byte, []int) {
	return file_learn_control_proto_rawDescGZIP(), []int{22}
}

func (x *TrainingBaseInfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TrainingBaseInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TrainingBaseInfo) GetType() TrainingType {
	if x != nil {
		return x.Type
	}
	return TrainingType_UNKNOWN_TRAINING
}

var File_learn_control_proto protoreflect.FileDescriptor

var file_learn_control_proto_rawDesc = []byte{
	0x0a, 0x13, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x33, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x44, 0x61, 0x72, 0x59, 0x75, 0x72, 0x31, 0x33, 0x2e, 0x6c, 0x65, 0x61, 0x72, 0x6e,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6c, 0x65, 0x61,
	0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x45, 0x0a, 0x2b, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x57, 0x69, 0x74, 0x68,
	0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x22, 0x66, 0x0a, 0x28, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x54,
	0x61, 0x73, 0x6b, 0x57, 0x69, 0x74, 0x68, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x49, 0x44, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x0c, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x49, 0x44, 0x73, 0x22, 0xc8,
	0x01, 0x0a, 0x23, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x57, 0x69, 0x74, 0x68,
	0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x12, 0x2e,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x59,
	0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x3d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x44, 0x61,
	0x72, 0x59, 0x75, 0x72, 0x31, 0x33, 0x2e, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x08, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x22, 0x8b, 0x01, 0x0a, 0x16, 0x43, 0x6c,
	0x6f, 0x73, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x12, 0x59, 0x0a, 0x08,
	0x74, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d,
	0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x44, 0x61, 0x72, 0x59,
	0x75, 0x72, 0x31, 0x33, 0x2e, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x74,
	0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x22, 0x3c, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x54, 0x61,
	0x73, 0x6b, 0x73, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x04, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x00, 0x52, 0x04, 0x64, 0x6f, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x22, 0x6c, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b,
	0x73, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4f, 0x0a, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x39, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x44,
	0x61, 0x72, 0x59, 0x75, 0x72, 0x31, 0x33, 0x2e, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x05, 0x74, 0x61,
	0x73, 0x6b, 0x73, 0x22, 0xdb, 0x02, 0x0a, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x51, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x44, 0x61, 0x72, 0x59, 0x75, 0x72, 0x31, 0x33,
	0x2e, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x2e, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x61, 0x72,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f,
	0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f,
	0x72, 0x12, 0x2a, 0x0a, 0x10, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c,
	0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x6f, 0x77,
	0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x64, 0x6f, 0x6e,
	0x65, 0x22, 0xae, 0x03, 0x0a, 0x12, 0x41, 0x64, 0x64, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x08, 0x66, 0x75, 0x6c, 0x6c,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x44, 0x0a,
	0x09, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0xfa, 0x42,
	0x07, 0xb2, 0x01, 0x04, 0x08, 0x01, 0x38, 0x01, 0x52, 0x09, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x0a, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x0a, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x08,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x4c, 0x0a, 0x0e, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44,
	0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0xfa, 0x42, 0x05, 0xb2, 0x01, 0x02, 0x08, 0x01, 0x52,
	0x0e, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x42, 0x0a, 0x05, 0x73, 0x6e, 0x69, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2c,
	0xfa, 0x42, 0x29, 0x72, 0x27, 0x32, 0x25, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x7b, 0x33, 0x7d,
	0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x7b,
	0x33, 0x7d, 0x20, 0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x7b, 0x32, 0x7d, 0x24, 0x52, 0x05, 0x73, 0x6e,
	0x69, 0x6c, 0x73, 0x12, 0x4d, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x37, 0xfa, 0x42, 0x34, 0x72, 0x32, 0x32, 0x30, 0x5e, 0x5b, 0x61, 0x2d, 0x7a,
	0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x2e, 0x5f, 0x25, 0x2b, 0x2d, 0x5d, 0x2b, 0x40, 0x5b, 0x61,
	0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x2e, 0x2d, 0x5d, 0x2b, 0x5c, 0x2e, 0x5b, 0x61,
	0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x5d, 0x7b, 0x32, 0x2c, 0x7d, 0x24, 0x52, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x22, 0x2f, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65,
	0x65, 0x73, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x81, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x45, 0x6d, 0x70, 0x6c, 0x6f,
	0x79, 0x65, 0x65, 0x73, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x63, 0x0a, 0x09, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x44, 0x61, 0x72, 0x59, 0x75, 0x72, 0x31, 0x33, 0x2e, 0x6c, 0x65, 0x61, 0x72,
	0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6c, 0x65,
	0x61, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x45, 0x6d, 0x70, 0x6c,
	0x6f, 0x79, 0x65, 0x65, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x65, 0x6d,
	0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x73, 0x22, 0x78, 0x0a, 0x10, 0x45, 0x6d, 0x70, 0x6c, 0x6f,
	0x79, 0x65, 0x65, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x66,
	0x75, 0x6c, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66,
	0x75, 0x6c, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x62, 0x69, 0x72, 0x74, 0x68,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x74,
	0x65, 0x22, 0x39, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65,
	0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x20, 0x00, 0x52, 0x02, 0x69, 0x64, 0x22, 0x8a, 0x03, 0x0a,
	0x1f, 0x47, 0x65, 0x74, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x50, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x49, 0x44,
	0x12, 0x1a, 0x0a, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x09,
	0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x62, 0x69, 0x72,
	0x74, 0x68, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x61,
	0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0e, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x44, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x6e, 0x69, 0x6c, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x6e, 0x69, 0x6c, 0x73, 0x12, 0x5b, 0x0a, 0x09,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x44, 0x61, 0x72,
	0x59, 0x75, 0x72, 0x31, 0x33, 0x2e, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x09,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x9b, 0x02, 0x0a, 0x08, 0x54, 0x72,
	0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x55, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x41, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x44, 0x61, 0x72, 0x59, 0x75, 0x72, 0x31, 0x33, 0x2e, 0x6c,
	0x65, 0x61, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x36, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x44, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x72, 0x65, 0x50,
	0x61, 0x73, 0x73, 0x44, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x72, 0x65, 0x50, 0x61, 0x73,
	0x73, 0x44, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x68, 0x61, 0x73, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x68, 0x61, 0x73, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x22, 0x93, 0x01, 0x0a, 0x21, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x44, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x49, 0x44, 0x12, 0x1e, 0x0a,
	0x0a, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x44, 0x12, 0x2e, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x22, 0x98, 0x01,
	0x0a, 0x22, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65,
	0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x44, 0x61, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3a, 0x0a, 0x0a,
	0x72, 0x65, 0x50, 0x61, 0x73, 0x73, 0x44, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x72, 0x65,
	0x50, 0x61, 0x73, 0x73, 0x44, 0x61, 0x74, 0x65, 0x22, 0xfc, 0x03, 0x0a, 0x1c, 0x47, 0x65, 0x74,
	0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x73, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0a, 0x64, 0x65, 0x70,
	0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x0a, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1f,
	0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x23, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x44, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x49,
	0x44, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x72, 0x65, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x49, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x03, 0x52, 0x0c, 0x72, 0x65,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a,
	0x11, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x67, 0x73, 0x4e, 0x6f, 0x74, 0x50, 0x61, 0x73, 0x73,
	0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x04, 0x52, 0x11, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x69, 0x67, 0x73, 0x4e, 0x6f, 0x74, 0x50, 0x61, 0x73, 0x73, 0x65, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x3b, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x05,
	0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a,
	0x06, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x06, 0x52, 0x06, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x68, 0x61, 0x73, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x48, 0x07, 0x52, 0x0b, 0x68,
	0x61, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x44, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x65, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x69, 0x67, 0x73, 0x4e, 0x6f, 0x74, 0x50, 0x61, 0x73, 0x73, 0x65, 0x64, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x68, 0x61, 0x73, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x22, 0x80, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x45,
	0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x73, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x09, 0x65, 0x6d, 0x70,
	0x6c, 0x6f, 0x79, 0x65, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x44, 0x61, 0x72, 0x59, 0x75, 0x72,
	0x31, 0x33, 0x2e, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x2e, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x09, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x73, 0x22, 0xc3, 0x01, 0x0a, 0x0c, 0x45,
	0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x66,
	0x75, 0x6c, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66,
	0x75, 0x6c, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x70, 0x61, 0x72,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x70,
	0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x5b, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x44, 0x61, 0x72, 0x59, 0x75, 0x72, 0x31, 0x33, 0x2e, 0x6c, 0x65, 0x61,
	0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6c,
	0x65, 0x61, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x73,
	0x22, 0x3a, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x34, 0x0a, 0x14,
	0x47, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0x7b, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x63, 0x0a, 0x09, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x44, 0x61, 0x72, 0x59, 0x75,
	0x72, 0x31, 0x33, 0x2e, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x42, 0x61, 0x73, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x22,
	0x8d, 0x01, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x42, 0x61, 0x73, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x55, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x41, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x44, 0x61, 0x72, 0x59, 0x75, 0x72, 0x31, 0x33, 0x2e, 0x6c, 0x65, 0x61,
	0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6c,
	0x65, 0x61, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x2a,
	0x64, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x10, 0x00, 0x12, 0x0b, 0x0a,
	0x07, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x53,
	0x53, 0x49, 0x47, 0x4e, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x48, 0x4f, 0x4f, 0x53, 0x45,
	0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x45, 0x54, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4f, 0x4e, 0x54,
	0x52, 0x4f, 0x4c, 0x10, 0x06, 0x2a, 0x5f, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x5f, 0x54, 0x52, 0x41, 0x49, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x49,
	0x4e, 0x54, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x4f, 0x52, 0x59, 0x10, 0x01, 0x12, 0x0b, 0x0a,
	0x07, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x45,
	0x46, 0x52, 0x45, 0x53, 0x48, 0x45, 0x52, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45, 0x47,
	0x55, 0x4c, 0x41, 0x52, 0x10, 0x04, 0x32, 0xc7, 0x13, 0x0a, 0x0c, 0x4c, 0x65, 0x61, 0x72, 0x6e,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0xdd, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x45,
	0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x73, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4e,
	0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x44, 0x61, 0x72, 0x59,
	0x75, 0x72, 0x31, 0x33, 0x2e, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65,
	0x73, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4f,
	0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x44, 0x61, 0x72, 0x59,
	0x75, 0x72, 0x31, 0x33, 0x2e, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65,
	0x73, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x3a, 0x01, 0x2a, 0x22, 0x1b, 0x2f, 0x65, 0x6d, 0x70,
	0x6c, 0x6f, 0x79, 0x65, 0x65, 0x73, 0x2f, 0x67, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f,
	0x62, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0xed, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x45,
	0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x43,
	0x61, 0x72, 0x64, 0x12, 0x53, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x44, 0x61, 0x72, 0x59, 0x75, 0x72, 0x31, 0x33, 0x2e, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6c, 0x65, 0x61, 0x72,
	0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x6d, 0x70,
	0x6c, 0x6f, 0x79, 0x65, 0x65, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x61, 0x72,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x54, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x44, 0x61, 0x72, 0x59, 0x75, 0x72, 0x31, 0x33, 0x2e, 0x6c,
	0x65, 0x61, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x47,
	0x65, 0x74, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x61, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x27,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x3a, 0x01, 0x2a, 0x22, 0x1c, 0x2f, 0x65, 0x6d, 0x70, 0x6c,
	0x6f, 0x79, 0x65, 0x65, 0x73, 0x2f, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x61, 0x6c, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x12, 0xf9, 0x01, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x44, 0x61, 0x74, 0x65, 0x12, 0x56, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x44, 0x61, 0x72, 0x59, 0x75, 0x72, 0x31, 0x33, 0x2e, 0x6c, 0x65, 0x61,
	0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6c,
	0x65, 0x61, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x54, 0x72, 0x61, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x57,
	0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x44, 0x61, 0x72, 0x59,
	0x75, 0x72, 0x31, 0x33, 0x2e, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6d, 0x70, 0x6c, 0x6f,
	0x79, 0x65, 0x65, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x3a,
	0x01, 0x2a, 0x22, 0x1f, 0x2f, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x73, 0x2f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x8f, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x70, 0x61, 0x72,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x4b,
	0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x44, 0x61, 0x72, 0x59,
	0x75, 0x72, 0x31, 0x33, 0x2e, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x18, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x12, 0x12, 0x10, 0x2f, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x2f, 0x67, 0x65, 0x74, 0x12, 0x89, 0x01, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x49,
	0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x44, 0x61, 0x72, 0x59,
	0x75, 0x72, 0x31, 0x33, 0x2e, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x16, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x10, 0x12, 0x0e, 0x2f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x65,
	0x74, 0x12, 0x89, 0x01, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x49, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x44, 0x61, 0x72, 0x59, 0x75, 0x72, 0x31, 0x33,
	0x2e, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x16, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x12, 0x0e, 0x2f,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x67, 0x65, 0x74, 0x12, 0xe9, 0x01,
	0x0a, 0x15, 0x47, 0x65, 0x74, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x73, 0x42, 0x79,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x51, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x44, 0x61, 0x72, 0x59, 0x75, 0x72, 0x31, 0x33, 0x2e, 0x6c, 0x65,
	0x61, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x47, 0x65,
	0x74, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x73, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x52, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x44, 0x61, 0x72, 0x59, 0x75, 0x72, 0x31, 0x33,
	0x2e, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x2e, 0x47, 0x65, 0x74, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x73, 0x42, 0x79, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x3a, 0x01, 0x2a, 0x22, 0x1e, 0x2f, 0x65, 0x6d, 0x70, 0x6c,
	0x6f, 0x79, 0x65, 0x65, 0x73, 0x2f, 0x67, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x62,
	0x79, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x89, 0x01, 0x0a, 0x0b, 0x41, 0x64,
	0x64, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x12, 0x47, 0x2e, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x44, 0x61, 0x72, 0x59, 0x75, 0x72, 0x31, 0x33, 0x2e,
	0x6c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e,
	0x41, 0x64, 0x64, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x13, 0x3a, 0x01, 0x2a, 0x22, 0x0e, 0x2f, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65,
	0x73, 0x2f, 0x61, 0x64, 0x64, 0x12, 0xc6, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73,
	0x6b, 0x73, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x4d, 0x2e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x44, 0x61, 0x72, 0x59, 0x75, 0x72, 0x31,
	0x33, 0x2e, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4e, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x44, 0x61, 0x72, 0x59, 0x75, 0x72, 0x31, 0x33,
	0x2e, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x12, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x0c, 0x12, 0x0a, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2f, 0x67, 0x65, 0x74, 0x12, 0x8f,
	0x01, 0x0a, 0x0f, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x54, 0x61,
	0x73, 0x6b, 0x12, 0x4b, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x44, 0x61, 0x72, 0x59, 0x75, 0x72, 0x31, 0x33, 0x2e, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6c, 0x65, 0x61, 0x72, 0x6e,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x41, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x3a,
	0x01, 0x2a, 0x22, 0x0c, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2f, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x12, 0xc0, 0x01, 0x0a, 0x1c, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x57, 0x69,
	0x74, 0x68, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65, 0x53, 0x65,
	0x74, 0x12, 0x58, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x44,
	0x61, 0x72, 0x59, 0x75, 0x72, 0x31, 0x33, 0x2e, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x61, 0x73,
	0x6b, 0x57, 0x69, 0x74, 0x68, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74,
	0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x3a, 0x01, 0x2a, 0x22, 0x23,
	0x2f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x77, 0x69, 0x74,
	0x68, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x73, 0x65, 0x74, 0x12, 0xcf, 0x01, 0x0a, 0x21, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x61, 0x73,
	0x6b, 0x57, 0x69, 0x74, 0x68, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x53, 0x65, 0x74, 0x12, 0x5d, 0x2e, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x44, 0x61, 0x72, 0x59, 0x75, 0x72, 0x31, 0x33, 0x2e,
	0x6c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e,
	0x43, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x57, 0x69, 0x74, 0x68, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x53, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x33, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x3a, 0x01, 0x2a, 0x22, 0x28, 0x2f, 0x74, 0x61,
	0x73, 0x6b, 0x73, 0x2f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x73, 0x5f, 0x73, 0x65, 0x74, 0x12, 0xd8, 0x01, 0x0a, 0x24, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x54,
	0x61, 0x73, 0x6b, 0x57, 0x69, 0x74, 0x68, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x12, 0x60,
	0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x44, 0x61, 0x72, 0x59,
	0x75, 0x72, 0x31, 0x33, 0x2e, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x57, 0x69,
	0x74, 0x68, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x36, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30,
	0x3a, 0x01, 0x2a, 0x22, 0x2b, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2f, 0x63, 0x6c, 0x6f, 0x73,
	0x65, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x42, 0x35, 0x5a, 0x33, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x44,
	0x61, 0x72, 0x59, 0x75, 0x72, 0x31, 0x33, 0x2f, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_learn_control_proto_rawDescOnce sync.Once
	file_learn_control_proto_rawDescData = file_learn_control_proto_rawDesc
)

func file_learn_control_proto_rawDescGZIP() []byte {
	file_learn_control_proto_rawDescOnce.Do(func() {
		file_learn_control_proto_rawDescData = protoimpl.X.CompressGZIP(file_learn_control_proto_rawDescData)
	})
	return file_learn_control_proto_rawDescData
}

var file_learn_control_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_learn_control_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_learn_control_proto_goTypes = []any{
	(TaskType)(0),     // 0: github.com.DarYur13.learn_control.api.learn_control.taskType
	(TrainingType)(0), // 1: github.com.DarYur13.learn_control.api.learn_control.trainingType
	(*CloseTaskWithTrainingProtocolConfirmRequest)(nil), // 2: github.com.DarYur13.learn_control.api.learn_control.CloseTaskWithTrainingProtocolConfirmRequest
	(*CloseTaskWithPositionTrainingsSetRequest)(nil),    // 3: github.com.DarYur13.learn_control.api.learn_control.CloseTaskWithPositionTrainingsSetRequest
	(*CloseTaskWithTrainingDateSetRequest)(nil),         // 4: github.com.DarYur13.learn_control.api.learn_control.CloseTaskWithTrainingDateSetRequest
	(*CloseAssignTaskRequest)(nil),                      // 5: github.com.DarYur13.learn_control.api.learn_control.CloseAssignTaskRequest
	(*GetTasksByFiltersRequest)(nil),                    // 6: github.com.DarYur13.learn_control.api.learn_control.GetTasksByFiltersRequest
	(*GetTasksByFiltersResponse)(nil),                   // 7: github.com.DarYur13.learn_control.api.learn_control.GetTasksByFiltersResponse
	(*Task)(nil),                                        // 8: github.com.DarYur13.learn_control.api.learn_control.Task
	(*AddEmployeeRequest)(nil),                          // 9: github.com.DarYur13.learn_control.api.learn_control.AddEmployeeRequest
	(*GetEmployeesByNameRequest)(nil),                   // 10: github.com.DarYur13.learn_control.api.learn_control.GetEmployeesByNameRequest
	(*GetEmployeesByNameResponse)(nil),                  // 11: github.com.DarYur13.learn_control.api.learn_control.GetEmployeesByNameResponse
	(*EmployeeBaseInfo)(nil),                            // 12: github.com.DarYur13.learn_control.api.learn_control.EmployeeBaseInfo
	(*GetEmployeePersonalCardRequest)(nil),              // 13: github.com.DarYur13.learn_control.api.learn_control.GetEmployeePersonalCardRequest
	(*GetEmployeePersonalCardResponse)(nil),             // 14: github.com.DarYur13.learn_control.api.learn_control.GetEmployeePersonalCardResponse
	(*Training)(nil),                                    // 15: github.com.DarYur13.learn_control.api.learn_control.Training
	(*UpdateEmployeeTrainingDateRequest)(nil),           // 16: github.com.DarYur13.learn_control.api.learn_control.UpdateEmployeeTrainingDateRequest
	(*UpdateEmployeeTrainingDateResponse)(nil),          // 17: github.com.DarYur13.learn_control.api.learn_control.UpdateEmployeeTrainingDateResponse
	(*GetEmployeesByFiltersRequest)(nil),                // 18: github.com.DarYur13.learn_control.api.learn_control.GetEmployeesByFiltersRequest
	(*GetEmployeesByFiltersResponse)(nil),               // 19: github.com.DarYur13.learn_control.api.learn_control.GetEmployeesByFiltersResponse
	(*EmployeeInfo)(nil),                                // 20: github.com.DarYur13.learn_control.api.learn_control.EmployeeInfo
	(*GetDepartmentsResponse)(nil),                      // 21: github.com.DarYur13.learn_control.api.learn_control.GetDepartmentsResponse
	(*GetPositionsResponse)(nil),                        // 22: github.com.DarYur13.learn_control.api.learn_control.GetPositionsResponse
	(*GetTrainingsResponse)(nil),                        // 23: github.com.DarYur13.learn_control.api.learn_control.GetTrainingsResponse
	(*TrainingBaseInfo)(nil),                            // 24: github.com.DarYur13.learn_control.api.learn_control.TrainingBaseInfo
	(*timestamppb.Timestamp)(nil),                       // 25: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),                               // 26: google.protobuf.Empty
}
var file_learn_control_proto_depIdxs = []int32{
	25, // 0: github.com.DarYur13.learn_control.api.learn_control.CloseTaskWithTrainingDateSetRequest.date:type_name -> google.protobuf.Timestamp
	0,  // 1: github.com.DarYur13.learn_control.api.learn_control.CloseTaskWithTrainingDateSetRequest.taskType:type_name -> github.com.DarYur13.learn_control.api.learn_control.taskType
	0,  // 2: github.com.DarYur13.learn_control.api.learn_control.CloseAssignTaskRequest.taskType:type_name -> github.com.DarYur13.learn_control.api.learn_control.taskType
	8,  // 3: github.com.DarYur13.learn_control.api.learn_control.GetTasksByFiltersResponse.tasks:type_name -> github.com.DarYur13.learn_control.api.learn_control.Task
	0,  // 4: github.com.DarYur13.learn_control.api.learn_control.Task.type:type_name -> github.com.DarYur13.learn_control.api.learn_control.taskType
	25, // 5: github.com.DarYur13.learn_control.api.learn_control.AddEmployeeRequest.birthdate:type_name -> google.protobuf.Timestamp
	25, // 6: github.com.DarYur13.learn_control.api.learn_control.AddEmployeeRequest.employmentDate:type_name -> google.protobuf.Timestamp
	12, // 7: github.com.DarYur13.learn_control.api.learn_control.GetEmployeesByNameResponse.employees:type_name -> github.com.DarYur13.learn_control.api.learn_control.EmployeeBaseInfo
	25, // 8: github.com.DarYur13.learn_control.api.learn_control.EmployeeBaseInfo.birthdate:type_name -> google.protobuf.Timestamp
	25, // 9: github.com.DarYur13.learn_control.api.learn_control.GetEmployeePersonalCardResponse.birthdate:type_name -> google.protobuf.Timestamp
	25, // 10: github.com.DarYur13.learn_control.api.learn_control.GetEmployeePersonalCardResponse.employmentDate:type_name -> google.protobuf.Timestamp
	15, // 11: github.com.DarYur13.learn_control.api.learn_control.GetEmployeePersonalCardResponse.trainings:type_name -> github.com.DarYur13.learn_control.api.learn_control.Training
	1,  // 12: github.com.DarYur13.learn_control.api.learn_control.Training.type:type_name -> github.com.DarYur13.learn_control.api.learn_control.trainingType
	25, // 13: github.com.DarYur13.learn_control.api.learn_control.Training.passDate:type_name -> google.protobuf.Timestamp
	25, // 14: github.com.DarYur13.learn_control.api.learn_control.Training.rePassDate:type_name -> google.protobuf.Timestamp
	25, // 15: github.com.DarYur13.learn_control.api.learn_control.UpdateEmployeeTrainingDateRequest.date:type_name -> google.protobuf.Timestamp
	25, // 16: github.com.DarYur13.learn_control.api.learn_control.UpdateEmployeeTrainingDateResponse.passDate:type_name -> google.protobuf.Timestamp
	25, // 17: github.com.DarYur13.learn_control.api.learn_control.UpdateEmployeeTrainingDateResponse.rePassDate:type_name -> google.protobuf.Timestamp
	25, // 18: github.com.DarYur13.learn_control.api.learn_control.GetEmployeesByFiltersRequest.dateFrom:type_name -> google.protobuf.Timestamp
	25, // 19: github.com.DarYur13.learn_control.api.learn_control.GetEmployeesByFiltersRequest.dateTo:type_name -> google.protobuf.Timestamp
	20, // 20: github.com.DarYur13.learn_control.api.learn_control.GetEmployeesByFiltersResponse.employees:type_name -> github.com.DarYur13.learn_control.api.learn_control.EmployeeInfo
	15, // 21: github.com.DarYur13.learn_control.api.learn_control.EmployeeInfo.trainings:type_name -> github.com.DarYur13.learn_control.api.learn_control.Training
	24, // 22: github.com.DarYur13.learn_control.api.learn_control.GetTrainingsResponse.trainings:type_name -> github.com.DarYur13.learn_control.api.learn_control.TrainingBaseInfo
	1,  // 23: github.com.DarYur13.learn_control.api.learn_control.TrainingBaseInfo.type:type_name -> github.com.DarYur13.learn_control.api.learn_control.trainingType
	10, // 24: github.com.DarYur13.learn_control.api.learn_control.LearnControl.GetEmployeesByName:input_type -> github.com.DarYur13.learn_control.api.learn_control.GetEmployeesByNameRequest
	13, // 25: github.com.DarYur13.learn_control.api.learn_control.LearnControl.GetEmployeePersonalCard:input_type -> github.com.DarYur13.learn_control.api.learn_control.GetEmployeePersonalCardRequest
	16, // 26: github.com.DarYur13.learn_control.api.learn_control.LearnControl.UpdateEmployeeTrainingDate:input_type -> github.com.DarYur13.learn_control.api.learn_control.UpdateEmployeeTrainingDateRequest
	26, // 27: github.com.DarYur13.learn_control.api.learn_control.LearnControl.GetDepartments:input_type -> google.protobuf.Empty
	26, // 28: github.com.DarYur13.learn_control.api.learn_control.LearnControl.GetPositions:input_type -> google.protobuf.Empty
	26, // 29: github.com.DarYur13.learn_control.api.learn_control.LearnControl.GetTrainings:input_type -> google.protobuf.Empty
	18, // 30: github.com.DarYur13.learn_control.api.learn_control.LearnControl.GetEmployeesByFilters:input_type -> github.com.DarYur13.learn_control.api.learn_control.GetEmployeesByFiltersRequest
	9,  // 31: github.com.DarYur13.learn_control.api.learn_control.LearnControl.AddEmployee:input_type -> github.com.DarYur13.learn_control.api.learn_control.AddEmployeeRequest
	6,  // 32: github.com.DarYur13.learn_control.api.learn_control.LearnControl.GetTasksByFilters:input_type -> github.com.DarYur13.learn_control.api.learn_control.GetTasksByFiltersRequest
	5,  // 33: github.com.DarYur13.learn_control.api.learn_control.LearnControl.CloseAssignTask:input_type -> github.com.DarYur13.learn_control.api.learn_control.CloseAssignTaskRequest
	4,  // 34: github.com.DarYur13.learn_control.api.learn_control.LearnControl.CloseTaskWithTrainingDateSet:input_type -> github.com.DarYur13.learn_control.api.learn_control.CloseTaskWithTrainingDateSetRequest
	3,  // 35: github.com.DarYur13.learn_control.api.learn_control.LearnControl.CloseTaskWithPositionTrainingsSet:input_type -> github.com.DarYur13.learn_control.api.learn_control.CloseTaskWithPositionTrainingsSetRequest
	2,  // 36: github.com.DarYur13.learn_control.api.learn_control.LearnControl.CloseTaskWithTrainingProtocolConfirm:input_type -> github.com.DarYur13.learn_control.api.learn_control.CloseTaskWithTrainingProtocolConfirmRequest
	11, // 37: github.com.DarYur13.learn_control.api.learn_control.LearnControl.GetEmployeesByName:output_type -> github.com.DarYur13.learn_control.api.learn_control.GetEmployeesByNameResponse
	14, // 38: github.com.DarYur13.learn_control.api.learn_control.LearnControl.GetEmployeePersonalCard:output_type -> github.com.DarYur13.learn_control.api.learn_control.GetEmployeePersonalCardResponse
	17, // 39: github.com.DarYur13.learn_control.api.learn_control.LearnControl.UpdateEmployeeTrainingDate:output_type -> github.com.DarYur13.learn_control.api.learn_control.UpdateEmployeeTrainingDateResponse
	21, // 40: github.com.DarYur13.learn_control.api.learn_control.LearnControl.GetDepartments:output_type -> github.com.DarYur13.learn_control.api.learn_control.GetDepartmentsResponse
	22, // 41: github.com.DarYur13.learn_control.api.learn_control.LearnControl.GetPositions:output_type -> github.com.DarYur13.learn_control.api.learn_control.GetPositionsResponse
	23, // 42: github.com.DarYur13.learn_control.api.learn_control.LearnControl.GetTrainings:output_type -> github.com.DarYur13.learn_control.api.learn_control.GetTrainingsResponse
	19, // 43: github.com.DarYur13.learn_control.api.learn_control.LearnControl.GetEmployeesByFilters:output_type -> github.com.DarYur13.learn_control.api.learn_control.GetEmployeesByFiltersResponse
	26, // 44: github.com.DarYur13.learn_control.api.learn_control.LearnControl.AddEmployee:output_type -> google.protobuf.Empty
	7,  // 45: github.com.DarYur13.learn_control.api.learn_control.LearnControl.GetTasksByFilters:output_type -> github.com.DarYur13.learn_control.api.learn_control.GetTasksByFiltersResponse
	26, // 46: github.com.DarYur13.learn_control.api.learn_control.LearnControl.CloseAssignTask:output_type -> google.protobuf.Empty
	26, // 47: github.com.DarYur13.learn_control.api.learn_control.LearnControl.CloseTaskWithTrainingDateSet:output_type -> google.protobuf.Empty
	26, // 48: github.com.DarYur13.learn_control.api.learn_control.LearnControl.CloseTaskWithPositionTrainingsSet:output_type -> google.protobuf.Empty
	26, // 49: github.com.DarYur13.learn_control.api.learn_control.LearnControl.CloseTaskWithTrainingProtocolConfirm:output_type -> google.protobuf.Empty
	37, // [37:50] is the sub-list for method output_type
	24, // [24:37] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_learn_control_proto_init() }
func file_learn_control_proto_init() {
	if File_learn_control_proto != nil {
		return
	}
	file_learn_control_proto_msgTypes[4].OneofWrappers = []any{}
	file_learn_control_proto_msgTypes[16].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_learn_control_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_learn_control_proto_goTypes,
		DependencyIndexes: file_learn_control_proto_depIdxs,
		EnumInfos:         file_learn_control_proto_enumTypes,
		MessageInfos:      file_learn_control_proto_msgTypes,
	}.Build()
	File_learn_control_proto = out.File
	file_learn_control_proto_rawDesc = nil
	file_learn_control_proto_goTypes = nil
	file_learn_control_proto_depIdxs = nil
}
