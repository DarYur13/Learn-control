// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v3.21.12
// source: learn_control.proto

package learn_control

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetEmployeesByNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetEmployeesByNameRequest) Reset() {
	*x = GetEmployeesByNameRequest{}
	mi := &file_learn_control_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetEmployeesByNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEmployeesByNameRequest) ProtoMessage() {}

func (x *GetEmployeesByNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_learn_control_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEmployeesByNameRequest.ProtoReflect.Descriptor instead.
func (*GetEmployeesByNameRequest) Descriptor() ([]byte, []int) {
	return file_learn_control_proto_rawDescGZIP(), []int{0}
}

func (x *GetEmployeesByNameRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetEmployeesByNameResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Employees []*EmployeeBaseInfo `protobuf:"bytes,1,rep,name=employees,proto3" json:"employees,omitempty"`
}

func (x *GetEmployeesByNameResponse) Reset() {
	*x = GetEmployeesByNameResponse{}
	mi := &file_learn_control_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetEmployeesByNameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEmployeesByNameResponse) ProtoMessage() {}

func (x *GetEmployeesByNameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_learn_control_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEmployeesByNameResponse.ProtoReflect.Descriptor instead.
func (*GetEmployeesByNameResponse) Descriptor() ([]byte, []int) {
	return file_learn_control_proto_rawDescGZIP(), []int{1}
}

func (x *GetEmployeesByNameResponse) GetEmployees() []*EmployeeBaseInfo {
	if x != nil {
		return x.Employees
	}
	return nil
}

type EmployeeBaseInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Fullname  string `protobuf:"bytes,2,opt,name=fullname,proto3" json:"fullname,omitempty"`
	Birthdate string `protobuf:"bytes,3,opt,name=birthdate,proto3" json:"birthdate,omitempty"`
}

func (x *EmployeeBaseInfo) Reset() {
	*x = EmployeeBaseInfo{}
	mi := &file_learn_control_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EmployeeBaseInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmployeeBaseInfo) ProtoMessage() {}

func (x *EmployeeBaseInfo) ProtoReflect() protoreflect.Message {
	mi := &file_learn_control_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmployeeBaseInfo.ProtoReflect.Descriptor instead.
func (*EmployeeBaseInfo) Descriptor() ([]byte, []int) {
	return file_learn_control_proto_rawDescGZIP(), []int{2}
}

func (x *EmployeeBaseInfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *EmployeeBaseInfo) GetFullname() string {
	if x != nil {
		return x.Fullname
	}
	return ""
}

func (x *EmployeeBaseInfo) GetBirthdate() string {
	if x != nil {
		return x.Birthdate
	}
	return ""
}

type GetEmployeeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetEmployeeRequest) Reset() {
	*x = GetEmployeeRequest{}
	mi := &file_learn_control_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetEmployeeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEmployeeRequest) ProtoMessage() {}

func (x *GetEmployeeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_learn_control_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEmployeeRequest.ProtoReflect.Descriptor instead.
func (*GetEmployeeRequest) Descriptor() ([]byte, []int) {
	return file_learn_control_proto_rawDescGZIP(), []int{3}
}

func (x *GetEmployeeRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetEmployeeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fullname   string      `protobuf:"bytes,1,opt,name=fullname,proto3" json:"fullname,omitempty"`
	Birthdate  string      `protobuf:"bytes,2,opt,name=birthdate,proto3" json:"birthdate,omitempty"`
	Department string      `protobuf:"bytes,3,opt,name=department,proto3" json:"department,omitempty"`
	Position   string      `protobuf:"bytes,4,opt,name=position,proto3" json:"position,omitempty"`
	Snils      string      `protobuf:"bytes,5,opt,name=snils,proto3" json:"snils,omitempty"`
	Trainings  []*Training `protobuf:"bytes,6,rep,name=trainings,proto3" json:"trainings,omitempty"`
}

func (x *GetEmployeeResponse) Reset() {
	*x = GetEmployeeResponse{}
	mi := &file_learn_control_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetEmployeeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEmployeeResponse) ProtoMessage() {}

func (x *GetEmployeeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_learn_control_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEmployeeResponse.ProtoReflect.Descriptor instead.
func (*GetEmployeeResponse) Descriptor() ([]byte, []int) {
	return file_learn_control_proto_rawDescGZIP(), []int{4}
}

func (x *GetEmployeeResponse) GetFullname() string {
	if x != nil {
		return x.Fullname
	}
	return ""
}

func (x *GetEmployeeResponse) GetBirthdate() string {
	if x != nil {
		return x.Birthdate
	}
	return ""
}

func (x *GetEmployeeResponse) GetDepartment() string {
	if x != nil {
		return x.Department
	}
	return ""
}

func (x *GetEmployeeResponse) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

func (x *GetEmployeeResponse) GetSnils() string {
	if x != nil {
		return x.Snils
	}
	return ""
}

func (x *GetEmployeeResponse) GetTrainings() []*Training {
	if x != nil {
		return x.Trainings
	}
	return nil
}

type Training struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	PassDate   string `protobuf:"bytes,2,opt,name=passDate,proto3" json:"passDate,omitempty"`
	RePassDate string `protobuf:"bytes,3,opt,name=rePassDate,proto3" json:"rePassDate,omitempty"`
}

func (x *Training) Reset() {
	*x = Training{}
	mi := &file_learn_control_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Training) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Training) ProtoMessage() {}

func (x *Training) ProtoReflect() protoreflect.Message {
	mi := &file_learn_control_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Training.ProtoReflect.Descriptor instead.
func (*Training) Descriptor() ([]byte, []int) {
	return file_learn_control_proto_rawDescGZIP(), []int{5}
}

func (x *Training) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Training) GetPassDate() string {
	if x != nil {
		return x.PassDate
	}
	return ""
}

func (x *Training) GetRePassDate() string {
	if x != nil {
		return x.RePassDate
	}
	return ""
}

type SetEmployeeTrainingDateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EmployeeID int64  `protobuf:"varint,1,opt,name=employeeID,proto3" json:"employeeID,omitempty"`
	TrainigID  int64  `protobuf:"varint,2,opt,name=trainigID,proto3" json:"trainigID,omitempty"`
	Date       string `protobuf:"bytes,3,opt,name=date,proto3" json:"date,omitempty"`
}

func (x *SetEmployeeTrainingDateRequest) Reset() {
	*x = SetEmployeeTrainingDateRequest{}
	mi := &file_learn_control_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetEmployeeTrainingDateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetEmployeeTrainingDateRequest) ProtoMessage() {}

func (x *SetEmployeeTrainingDateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_learn_control_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetEmployeeTrainingDateRequest.ProtoReflect.Descriptor instead.
func (*SetEmployeeTrainingDateRequest) Descriptor() ([]byte, []int) {
	return file_learn_control_proto_rawDescGZIP(), []int{6}
}

func (x *SetEmployeeTrainingDateRequest) GetEmployeeID() int64 {
	if x != nil {
		return x.EmployeeID
	}
	return 0
}

func (x *SetEmployeeTrainingDateRequest) GetTrainigID() int64 {
	if x != nil {
		return x.TrainigID
	}
	return 0
}

func (x *SetEmployeeTrainingDateRequest) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

type SetEmployeeTrainingDateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PassDate   string `protobuf:"bytes,3,opt,name=passDate,proto3" json:"passDate,omitempty"`
	RePassDate string `protobuf:"bytes,4,opt,name=rePassDate,proto3" json:"rePassDate,omitempty"`
}

func (x *SetEmployeeTrainingDateResponse) Reset() {
	*x = SetEmployeeTrainingDateResponse{}
	mi := &file_learn_control_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetEmployeeTrainingDateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetEmployeeTrainingDateResponse) ProtoMessage() {}

func (x *SetEmployeeTrainingDateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_learn_control_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetEmployeeTrainingDateResponse.ProtoReflect.Descriptor instead.
func (*SetEmployeeTrainingDateResponse) Descriptor() ([]byte, []int) {
	return file_learn_control_proto_rawDescGZIP(), []int{7}
}

func (x *SetEmployeeTrainingDateResponse) GetPassDate() string {
	if x != nil {
		return x.PassDate
	}
	return ""
}

func (x *SetEmployeeTrainingDateResponse) GetRePassDate() string {
	if x != nil {
		return x.RePassDate
	}
	return ""
}

type UpdateEmployeeTrainingDateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EmployeeID int64  `protobuf:"varint,1,opt,name=employeeID,proto3" json:"employeeID,omitempty"`
	TrainigID  int64  `protobuf:"varint,2,opt,name=trainigID,proto3" json:"trainigID,omitempty"`
	Date       string `protobuf:"bytes,3,opt,name=date,proto3" json:"date,omitempty"`
}

func (x *UpdateEmployeeTrainingDateRequest) Reset() {
	*x = UpdateEmployeeTrainingDateRequest{}
	mi := &file_learn_control_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateEmployeeTrainingDateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateEmployeeTrainingDateRequest) ProtoMessage() {}

func (x *UpdateEmployeeTrainingDateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_learn_control_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateEmployeeTrainingDateRequest.ProtoReflect.Descriptor instead.
func (*UpdateEmployeeTrainingDateRequest) Descriptor() ([]byte, []int) {
	return file_learn_control_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateEmployeeTrainingDateRequest) GetEmployeeID() int64 {
	if x != nil {
		return x.EmployeeID
	}
	return 0
}

func (x *UpdateEmployeeTrainingDateRequest) GetTrainigID() int64 {
	if x != nil {
		return x.TrainigID
	}
	return 0
}

func (x *UpdateEmployeeTrainingDateRequest) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

type UpdateEmployeeTrainingDateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PassDate   string `protobuf:"bytes,3,opt,name=passDate,proto3" json:"passDate,omitempty"`
	RePassDate string `protobuf:"bytes,4,opt,name=rePassDate,proto3" json:"rePassDate,omitempty"`
}

func (x *UpdateEmployeeTrainingDateResponse) Reset() {
	*x = UpdateEmployeeTrainingDateResponse{}
	mi := &file_learn_control_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateEmployeeTrainingDateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateEmployeeTrainingDateResponse) ProtoMessage() {}

func (x *UpdateEmployeeTrainingDateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_learn_control_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateEmployeeTrainingDateResponse.ProtoReflect.Descriptor instead.
func (*UpdateEmployeeTrainingDateResponse) Descriptor() ([]byte, []int) {
	return file_learn_control_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateEmployeeTrainingDateResponse) GetPassDate() string {
	if x != nil {
		return x.PassDate
	}
	return ""
}

func (x *UpdateEmployeeTrainingDateResponse) GetRePassDate() string {
	if x != nil {
		return x.RePassDate
	}
	return ""
}

type GetFiltersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetFiltersRequest) Reset() {
	*x = GetFiltersRequest{}
	mi := &file_learn_control_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFiltersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFiltersRequest) ProtoMessage() {}

func (x *GetFiltersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_learn_control_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFiltersRequest.ProtoReflect.Descriptor instead.
func (*GetFiltersRequest) Descriptor() ([]byte, []int) {
	return file_learn_control_proto_rawDescGZIP(), []int{10}
}

type GetFiltersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Departments []*FilterBaseInfo `protobuf:"bytes,1,rep,name=departments,proto3" json:"departments,omitempty"`
	Positions   []*FilterBaseInfo `protobuf:"bytes,2,rep,name=positions,proto3" json:"positions,omitempty"`
	Trainings   []*FilterBaseInfo `protobuf:"bytes,3,rep,name=trainings,proto3" json:"trainings,omitempty"`
}

func (x *GetFiltersResponse) Reset() {
	*x = GetFiltersResponse{}
	mi := &file_learn_control_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFiltersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFiltersResponse) ProtoMessage() {}

func (x *GetFiltersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_learn_control_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFiltersResponse.ProtoReflect.Descriptor instead.
func (*GetFiltersResponse) Descriptor() ([]byte, []int) {
	return file_learn_control_proto_rawDescGZIP(), []int{11}
}

func (x *GetFiltersResponse) GetDepartments() []*FilterBaseInfo {
	if x != nil {
		return x.Departments
	}
	return nil
}

func (x *GetFiltersResponse) GetPositions() []*FilterBaseInfo {
	if x != nil {
		return x.Positions
	}
	return nil
}

func (x *GetFiltersResponse) GetTrainings() []*FilterBaseInfo {
	if x != nil {
		return x.Trainings
	}
	return nil
}

type FilterBaseInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *FilterBaseInfo) Reset() {
	*x = FilterBaseInfo{}
	mi := &file_learn_control_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FilterBaseInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterBaseInfo) ProtoMessage() {}

func (x *FilterBaseInfo) ProtoReflect() protoreflect.Message {
	mi := &file_learn_control_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterBaseInfo.ProtoReflect.Descriptor instead.
func (*FilterBaseInfo) Descriptor() ([]byte, []int) {
	return file_learn_control_proto_rawDescGZIP(), []int{12}
}

func (x *FilterBaseInfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FilterBaseInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetEmployeesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DepartmentID   *int64 `protobuf:"varint,1,opt,name=departmentID,proto3,oneof" json:"departmentID,omitempty"`
	PositionID     *int64 `protobuf:"varint,2,opt,name=positionID,proto3,oneof" json:"positionID,omitempty"`
	TrainingID     *int64 `protobuf:"varint,3,opt,name=trainingID,proto3,oneof" json:"trainingID,omitempty"`
	RetrainingIn   *int64 `protobuf:"varint,4,opt,name=retrainingIn,proto3,oneof" json:"retrainingIn,omitempty"`
	TrainigsPassed *bool  `protobuf:"varint,5,opt,name=trainigsPassed,proto3,oneof" json:"trainigsPassed,omitempty"`
}

func (x *GetEmployeesRequest) Reset() {
	*x = GetEmployeesRequest{}
	mi := &file_learn_control_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetEmployeesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEmployeesRequest) ProtoMessage() {}

func (x *GetEmployeesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_learn_control_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEmployeesRequest.ProtoReflect.Descriptor instead.
func (*GetEmployeesRequest) Descriptor() ([]byte, []int) {
	return file_learn_control_proto_rawDescGZIP(), []int{13}
}

func (x *GetEmployeesRequest) GetDepartmentID() int64 {
	if x != nil && x.DepartmentID != nil {
		return *x.DepartmentID
	}
	return 0
}

func (x *GetEmployeesRequest) GetPositionID() int64 {
	if x != nil && x.PositionID != nil {
		return *x.PositionID
	}
	return 0
}

func (x *GetEmployeesRequest) GetTrainingID() int64 {
	if x != nil && x.TrainingID != nil {
		return *x.TrainingID
	}
	return 0
}

func (x *GetEmployeesRequest) GetRetrainingIn() int64 {
	if x != nil && x.RetrainingIn != nil {
		return *x.RetrainingIn
	}
	return 0
}

func (x *GetEmployeesRequest) GetTrainigsPassed() bool {
	if x != nil && x.TrainigsPassed != nil {
		return *x.TrainigsPassed
	}
	return false
}

type GetEmployeesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Employees []*EmployeeInfo `protobuf:"bytes,1,rep,name=employees,proto3" json:"employees,omitempty"`
}

func (x *GetEmployeesResponse) Reset() {
	*x = GetEmployeesResponse{}
	mi := &file_learn_control_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetEmployeesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEmployeesResponse) ProtoMessage() {}

func (x *GetEmployeesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_learn_control_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEmployeesResponse.ProtoReflect.Descriptor instead.
func (*GetEmployeesResponse) Descriptor() ([]byte, []int) {
	return file_learn_control_proto_rawDescGZIP(), []int{14}
}

func (x *GetEmployeesResponse) GetEmployees() []*EmployeeInfo {
	if x != nil {
		return x.Employees
	}
	return nil
}

type EmployeeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Fullname   string      `protobuf:"bytes,2,opt,name=fullname,proto3" json:"fullname,omitempty"`
	Department string      `protobuf:"bytes,4,opt,name=department,proto3" json:"department,omitempty"`
	Position   string      `protobuf:"bytes,5,opt,name=position,proto3" json:"position,omitempty"`
	Trainings  []*Training `protobuf:"bytes,6,rep,name=trainings,proto3" json:"trainings,omitempty"`
}

func (x *EmployeeInfo) Reset() {
	*x = EmployeeInfo{}
	mi := &file_learn_control_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EmployeeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmployeeInfo) ProtoMessage() {}

func (x *EmployeeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_learn_control_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmployeeInfo.ProtoReflect.Descriptor instead.
func (*EmployeeInfo) Descriptor() ([]byte, []int) {
	return file_learn_control_proto_rawDescGZIP(), []int{15}
}

func (x *EmployeeInfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *EmployeeInfo) GetFullname() string {
	if x != nil {
		return x.Fullname
	}
	return ""
}

func (x *EmployeeInfo) GetDepartment() string {
	if x != nil {
		return x.Department
	}
	return ""
}

func (x *EmployeeInfo) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

func (x *EmployeeInfo) GetTrainings() []*Training {
	if x != nil {
		return x.Trainings
	}
	return nil
}

var File_learn_control_proto protoreflect.FileDescriptor

var file_learn_control_proto_rawDesc = []byte{
	0x0a, 0x13, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x32, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x41, 0x72, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x2e, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6c, 0x65, 0x61, 0x72,
	0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x2f, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65,
	0x73, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0x80, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79,
	0x65, 0x65, 0x73, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x62, 0x0a, 0x09, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x41, 0x72, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x2e, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6c, 0x65, 0x61, 0x72,
	0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79,
	0x65, 0x65, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x65, 0x6d, 0x70, 0x6c,
	0x6f, 0x79, 0x65, 0x65, 0x73, 0x22, 0x5c, 0x0a, 0x10, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65,
	0x65, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x75, 0x6c,
	0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6c,
	0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64,
	0x61, 0x74, 0x65, 0x22, 0x2d, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79,
	0x65, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x20, 0x00, 0x52, 0x02,
	0x69, 0x64, 0x22, 0xfd, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79,
	0x65, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x75,
	0x6c, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75,
	0x6c, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x69, 0x72, 0x74, 0x68,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x6e, 0x69, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x73, 0x6e, 0x69, 0x6c, 0x73, 0x12, 0x5a, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x41, 0x72, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x2e, 0x6c,
	0x65, 0x61, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x54,
	0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x73, 0x22, 0x5a, 0x0a, 0x08, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x44, 0x61, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x72, 0x65, 0x50, 0x61, 0x73, 0x73, 0x44, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x50, 0x61, 0x73, 0x73, 0x44, 0x61, 0x74, 0x65, 0x22, 0x72,
	0x0a, 0x1e, 0x53, 0x65, 0x74, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x54, 0x72, 0x61,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x49, 0x44,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x67, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x67, 0x49, 0x44, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x65, 0x22, 0x5d, 0x0a, 0x1f, 0x53, 0x65, 0x74, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65,
	0x65, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x44, 0x61, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x50, 0x61, 0x73, 0x73, 0x44, 0x61, 0x74, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x50, 0x61, 0x73, 0x73, 0x44, 0x61, 0x74,
	0x65, 0x22, 0x75, 0x0a, 0x21, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6d, 0x70, 0x6c, 0x6f,
	0x79, 0x65, 0x65, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79,
	0x65, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x65, 0x6d, 0x70, 0x6c,
	0x6f, 0x79, 0x65, 0x65, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69,
	0x67, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x69, 0x67, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x22, 0x60, 0x0a, 0x22, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x44, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x44, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65,
	0x50, 0x61, 0x73, 0x73, 0x44, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x72, 0x65, 0x50, 0x61, 0x73, 0x73, 0x44, 0x61, 0x74, 0x65, 0x22, 0x13, 0x0a, 0x11, 0x47, 0x65,
	0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0xbe, 0x02, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x0b, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x41, 0x72, 0x74, 0x65, 0x6e, 0x73, 0x6f,
	0x2e, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0b, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x60, 0x0a, 0x09,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x42, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x41, 0x72, 0x74,
	0x65, 0x6e, 0x73, 0x6f, 0x2e, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x09, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x60,
	0x0a, 0x09, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x42, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x41,
	0x72, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x2e, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x61, 0x73,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x73,
	0x22, 0x34, 0x0a, 0x0e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xb1, 0x02, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x45, 0x6d,
	0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27,
	0x0a, 0x0c, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x0a, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x02, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x44, 0x88, 0x01,
	0x01, 0x12, 0x27, 0x0a, 0x0c, 0x72, 0x65, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x49,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x03, 0x52, 0x0c, 0x72, 0x65, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x69, 0x67, 0x73, 0x50, 0x61, 0x73, 0x73, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x04, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x67, 0x73, 0x50, 0x61,
	0x73, 0x73, 0x65, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x64, 0x65, 0x70, 0x61,
	0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x49, 0x44, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x69, 0x67, 0x73, 0x50, 0x61, 0x73, 0x73, 0x65, 0x64, 0x22, 0x76, 0x0a, 0x14, 0x47, 0x65,
	0x74, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x5e, 0x0a, 0x09, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x41, 0x72, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x2e, 0x6c, 0x65, 0x61, 0x72, 0x6e,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6c, 0x65, 0x61,
	0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x45, 0x6d, 0x70, 0x6c, 0x6f,
	0x79, 0x65, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65,
	0x65, 0x73, 0x22, 0xd2, 0x01, 0x0a, 0x0c, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5a, 0x0a, 0x09, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c,
	0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x41, 0x72, 0x74, 0x65,
	0x6e, 0x73, 0x6f, 0x2e, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x32, 0x98, 0x0a, 0x0a, 0x0c, 0x4c, 0x65, 0x61, 0x72,
	0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0xd6, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74,
	0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x73, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x4d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x41, 0x72, 0x74,
	0x65, 0x6e, 0x73, 0x6f, 0x2e, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65,
	0x73, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4e,
	0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x41, 0x72, 0x74, 0x65,
	0x6e, 0x73, 0x6f, 0x2e, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x73,
	0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x3a, 0x01, 0x2a, 0x22, 0x16, 0x2f, 0x65, 0x6d, 0x70, 0x6c,
	0x6f, 0x79, 0x65, 0x65, 0x73, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x62, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0xc3, 0x01, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65,
	0x65, 0x12, 0x46, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x41,
	0x72, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x2e, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79,
	0x65, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x47, 0x2e, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x41, 0x72, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x2e, 0x6c,
	0x65, 0x61, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x47,
	0x65, 0x74, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x22, 0x1b, 0x2f, 0x65, 0x6d, 0x70,
	0x6c, 0x6f, 0x79, 0x65, 0x65, 0x2f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x63,
	0x61, 0x72, 0x64, 0x2f, 0x67, 0x65, 0x74, 0x12, 0xea, 0x01, 0x0a, 0x17, 0x53, 0x65, 0x74, 0x45,
	0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x52, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x41, 0x72, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x2e, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6c, 0x65, 0x61, 0x72, 0x6e,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x53, 0x65, 0x74, 0x45, 0x6d, 0x70, 0x6c,
	0x6f, 0x79, 0x65, 0x65, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x53, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x41, 0x72, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x2e, 0x6c, 0x65, 0x61,
	0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6c,
	0x65, 0x61, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x53, 0x65, 0x74,
	0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x44, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x20, 0x3a, 0x01, 0x2a, 0x22, 0x1b, 0x2f, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79,
	0x65, 0x65, 0x2f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x2f, 0x73, 0x65, 0x74, 0x12, 0xf6, 0x01, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45,
	0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x55, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x41, 0x72, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x2e, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6c, 0x65, 0x61, 0x72, 0x6e,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45,
	0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x44,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x56, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x41, 0x72, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x2e,
	0x6c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x54, 0x72,
	0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x3a, 0x01, 0x2a, 0x22, 0x1e, 0x2f,
	0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x2f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0xbb, 0x01,
	0x0a, 0x0a, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x45, 0x2e, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x41, 0x72, 0x74, 0x65, 0x6e, 0x73,
	0x6f, 0x2e, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x46, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x41, 0x72, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x2e, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6c, 0x65, 0x61, 0x72, 0x6e,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x18, 0x12, 0x16, 0x2f, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x73, 0x2f,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x67, 0x65, 0x74, 0x12, 0xc4, 0x01, 0x0a, 0x0c,
	0x47, 0x65, 0x74, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x73, 0x12, 0x47, 0x2e, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x41, 0x72, 0x74, 0x65, 0x6e, 0x73,
	0x6f, 0x2e, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x48, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x41, 0x72, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x2e, 0x6c, 0x65, 0x61, 0x72, 0x6e,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6c, 0x65, 0x61,
	0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x6d,
	0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x12, 0x19, 0x2f, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79,
	0x65, 0x65, 0x73, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x62, 0x79, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x42, 0x35, 0x5a, 0x33, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x44, 0x61, 0x72, 0x59, 0x75, 0x72, 0x31, 0x33, 0x2f, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x6c, 0x65, 0x61, 0x72,
	0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_learn_control_proto_rawDescOnce sync.Once
	file_learn_control_proto_rawDescData = file_learn_control_proto_rawDesc
)

func file_learn_control_proto_rawDescGZIP() []byte {
	file_learn_control_proto_rawDescOnce.Do(func() {
		file_learn_control_proto_rawDescData = protoimpl.X.CompressGZIP(file_learn_control_proto_rawDescData)
	})
	return file_learn_control_proto_rawDescData
}

var file_learn_control_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_learn_control_proto_goTypes = []any{
	(*GetEmployeesByNameRequest)(nil),          // 0: github.com.Artenso.learn_control.api.learn_control.GetEmployeesByNameRequest
	(*GetEmployeesByNameResponse)(nil),         // 1: github.com.Artenso.learn_control.api.learn_control.GetEmployeesByNameResponse
	(*EmployeeBaseInfo)(nil),                   // 2: github.com.Artenso.learn_control.api.learn_control.EmployeeBaseInfo
	(*GetEmployeeRequest)(nil),                 // 3: github.com.Artenso.learn_control.api.learn_control.GetEmployeeRequest
	(*GetEmployeeResponse)(nil),                // 4: github.com.Artenso.learn_control.api.learn_control.GetEmployeeResponse
	(*Training)(nil),                           // 5: github.com.Artenso.learn_control.api.learn_control.Training
	(*SetEmployeeTrainingDateRequest)(nil),     // 6: github.com.Artenso.learn_control.api.learn_control.SetEmployeeTrainingDateRequest
	(*SetEmployeeTrainingDateResponse)(nil),    // 7: github.com.Artenso.learn_control.api.learn_control.SetEmployeeTrainingDateResponse
	(*UpdateEmployeeTrainingDateRequest)(nil),  // 8: github.com.Artenso.learn_control.api.learn_control.UpdateEmployeeTrainingDateRequest
	(*UpdateEmployeeTrainingDateResponse)(nil), // 9: github.com.Artenso.learn_control.api.learn_control.UpdateEmployeeTrainingDateResponse
	(*GetFiltersRequest)(nil),                  // 10: github.com.Artenso.learn_control.api.learn_control.GetFiltersRequest
	(*GetFiltersResponse)(nil),                 // 11: github.com.Artenso.learn_control.api.learn_control.GetFiltersResponse
	(*FilterBaseInfo)(nil),                     // 12: github.com.Artenso.learn_control.api.learn_control.FilterBaseInfo
	(*GetEmployeesRequest)(nil),                // 13: github.com.Artenso.learn_control.api.learn_control.GetEmployeesRequest
	(*GetEmployeesResponse)(nil),               // 14: github.com.Artenso.learn_control.api.learn_control.GetEmployeesResponse
	(*EmployeeInfo)(nil),                       // 15: github.com.Artenso.learn_control.api.learn_control.EmployeeInfo
}
var file_learn_control_proto_depIdxs = []int32{
	2,  // 0: github.com.Artenso.learn_control.api.learn_control.GetEmployeesByNameResponse.employees:type_name -> github.com.Artenso.learn_control.api.learn_control.EmployeeBaseInfo
	5,  // 1: github.com.Artenso.learn_control.api.learn_control.GetEmployeeResponse.trainings:type_name -> github.com.Artenso.learn_control.api.learn_control.Training
	12, // 2: github.com.Artenso.learn_control.api.learn_control.GetFiltersResponse.departments:type_name -> github.com.Artenso.learn_control.api.learn_control.FilterBaseInfo
	12, // 3: github.com.Artenso.learn_control.api.learn_control.GetFiltersResponse.positions:type_name -> github.com.Artenso.learn_control.api.learn_control.FilterBaseInfo
	12, // 4: github.com.Artenso.learn_control.api.learn_control.GetFiltersResponse.trainings:type_name -> github.com.Artenso.learn_control.api.learn_control.FilterBaseInfo
	15, // 5: github.com.Artenso.learn_control.api.learn_control.GetEmployeesResponse.employees:type_name -> github.com.Artenso.learn_control.api.learn_control.EmployeeInfo
	5,  // 6: github.com.Artenso.learn_control.api.learn_control.EmployeeInfo.trainings:type_name -> github.com.Artenso.learn_control.api.learn_control.Training
	0,  // 7: github.com.Artenso.learn_control.api.learn_control.LearnControl.GetEmployeesByName:input_type -> github.com.Artenso.learn_control.api.learn_control.GetEmployeesByNameRequest
	3,  // 8: github.com.Artenso.learn_control.api.learn_control.LearnControl.GetEmployee:input_type -> github.com.Artenso.learn_control.api.learn_control.GetEmployeeRequest
	6,  // 9: github.com.Artenso.learn_control.api.learn_control.LearnControl.SetEmployeeTrainingDate:input_type -> github.com.Artenso.learn_control.api.learn_control.SetEmployeeTrainingDateRequest
	8,  // 10: github.com.Artenso.learn_control.api.learn_control.LearnControl.UpdateEmployeeTrainingDate:input_type -> github.com.Artenso.learn_control.api.learn_control.UpdateEmployeeTrainingDateRequest
	10, // 11: github.com.Artenso.learn_control.api.learn_control.LearnControl.GetFilters:input_type -> github.com.Artenso.learn_control.api.learn_control.GetFiltersRequest
	13, // 12: github.com.Artenso.learn_control.api.learn_control.LearnControl.GetEmployees:input_type -> github.com.Artenso.learn_control.api.learn_control.GetEmployeesRequest
	1,  // 13: github.com.Artenso.learn_control.api.learn_control.LearnControl.GetEmployeesByName:output_type -> github.com.Artenso.learn_control.api.learn_control.GetEmployeesByNameResponse
	4,  // 14: github.com.Artenso.learn_control.api.learn_control.LearnControl.GetEmployee:output_type -> github.com.Artenso.learn_control.api.learn_control.GetEmployeeResponse
	7,  // 15: github.com.Artenso.learn_control.api.learn_control.LearnControl.SetEmployeeTrainingDate:output_type -> github.com.Artenso.learn_control.api.learn_control.SetEmployeeTrainingDateResponse
	9,  // 16: github.com.Artenso.learn_control.api.learn_control.LearnControl.UpdateEmployeeTrainingDate:output_type -> github.com.Artenso.learn_control.api.learn_control.UpdateEmployeeTrainingDateResponse
	11, // 17: github.com.Artenso.learn_control.api.learn_control.LearnControl.GetFilters:output_type -> github.com.Artenso.learn_control.api.learn_control.GetFiltersResponse
	14, // 18: github.com.Artenso.learn_control.api.learn_control.LearnControl.GetEmployees:output_type -> github.com.Artenso.learn_control.api.learn_control.GetEmployeesResponse
	13, // [13:19] is the sub-list for method output_type
	7,  // [7:13] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_learn_control_proto_init() }
func file_learn_control_proto_init() {
	if File_learn_control_proto != nil {
		return
	}
	file_learn_control_proto_msgTypes[13].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_learn_control_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_learn_control_proto_goTypes,
		DependencyIndexes: file_learn_control_proto_depIdxs,
		MessageInfos:      file_learn_control_proto_msgTypes,
	}.Build()
	File_learn_control_proto = out.File
	file_learn_control_proto_rawDesc = nil
	file_learn_control_proto_goTypes = nil
	file_learn_control_proto_depIdxs = nil
}
